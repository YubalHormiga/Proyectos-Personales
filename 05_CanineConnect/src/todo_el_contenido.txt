

--- File: api\DogsAPI.js ---

// En api/DogApi.js
import api from "../lib/axios.js";

const fetchData = async () => {
  const key = import.meta.env.VITE_API_KEY;
  try {
    const { data } = await api.get("/breeds", {
      headers: {
        "x-api-key": key,
      },
    });
    return data;
  } catch (error) {
    console.log(error);
  }
};

export { fetchData };



--- File: App.vue ---

<!-- App OK -->
<script setup>
import { RouterView } from "vue-router";
import Header from "../src/share/Header.vue";
import Footer from "../src/share/Footer.vue";
import MainNavigation from "./share/MainNavigation.vue";
</script>

<template>
  <div class="wrapper">
    <div class="image">
      <MainNavigation class="navegation" />
      <Header />
    </div>
    <div class="router-container">
      <div class="container">
        <RouterView />
      </div>
    </div>
    <Footer />
  </div>
</template>

<style scoped>
.image {
  background-image: url("../src/assets/images/dogs.webp");
  background-size: cover;
  background-repeat: no-repeat;
  background-position: 50% 33%;
  margin-bottom: 2rem
}

.navegation {
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 1000;
}
.wrapper {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  overflow-x: hidden;
}
.router-container {
  flex: 1;
  margin-bottom: 1rem;
  padding: 1rem;
}

/* @media (min-width: 640px) {
  .container {
    max-width: 120rem;
    margin: 0 auto;
  }
} */
</style>



--- File: assets\icons\dark-mode.svg ---
(Skipped (non-matching extension))


--- File: assets\icons\DeleteIcon.vue ---

<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="icon icon-tabler icon-tabler-trash"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="#ffbf00"
    fill="none"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
    <path d="M4 7l16 0" />
    <path d="M10 11l0 6" />
    <path d="M14 11l0 6" />
    <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" />
    <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" />
  </svg>
</template>



--- File: assets\icons\dog.webp ---
(Skipped (non-matching extension))


--- File: assets\icons\EditIcon.vue ---

<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="icon icon-tabler icon-tabler-pencil"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="#ffbf00"
    fill="none"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
    <path d="M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4" />
    <path d="M13.5 6.5l4 4" />
  </svg>
</template>



--- File: assets\icons\LoginUser.vue ---

<template>
  <div class="identity">
    <p class="identify-text">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="icon icon-tabler icon-tabler-user-circle"
        width="33"
        height="33"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="#ffffff"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
        <path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" />
        <path d="M12 10m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0" />
        <path
          d="M6.168 18.849a4 4 0 0 1 3.832 -2.849h4a4 4 0 0 1 3.834 2.855"
        />
      </svg>
    </p>
  </div>
</template>



--- File: assets\icons\LogoutUser.vue ---

<template>
 <svg
              xmlns="http://www.w3.org/2000/svg"
              class="icon icon-tabler icon-tabler-logout"
              width="32"
              height="32"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="#ffffff"
              fill="none"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path
                d="M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2"
              />
              <path d="M9 12h12l-3 -3" />
              <path d="M18 15l3 -3" />
            </svg>
</template>





--- File: assets\images\dogs.jpg ---
(Skipped (non-matching extension))


--- File: assets\images\dogs.webp ---
(Skipped (non-matching extension))


--- File: assets\main.css ---
(Skipped (non-matching extension))


--- File: components\Link.vue ---

<!-- componente Link -->
<script setup>
import { RouterLink } from "vue-router";

const props = defineProps({
  to: {
    type: String,
    required: true,
  },
});
</script>

<template>
  <div class="centered-container">
    <RouterLink :to="{ name: to }" class="css-button-shadow--sky"><slot></slot></RouterLink>
  </div>
</template>

<style scoped>
.centered-container {
  display: flex;
  justify-content: center;
  margin: 2rem 0;
}

.css-button-shadow--sky {
  min-width: 90px;
  height: 40px;
  text-decoration: none;
  color: #fff;
  padding: 5px 10px;
  font-weight: normal;
  cursor: pointer;
  transition: all 0.3s ease; /* Aseg√∫rate de que esta l√≠nea est√© presente */
  position: relative;
  display: inline-block;
  outline: none;
  border-radius: 5px;
  border: none;
  background-color:var(--accent-200);
  box-shadow: 0 3px 1px -2px #ccc, 0 2px 2px 0 #ccc, 0 1px 5px 0 #ccc;
  text-align: center
}

.css-button-shadow--sky:hover {
  background-color: var(--accent-100); /* Cambia el color al hacer hover */
  box-shadow: 0 4px 2px -2px #bbb, 0 4px 4px 0 #bbb, 0 2px 6px 0 #bbb; /* Ajusta el shadow al hacer hover */
}

.css-button-shadow--sky:active {
  background-color: #3367d6; /* Color diferente al estar activo */
  box-shadow: 0 4px 2px -3px #aaa, 0 4px 5px 1px #aaa, 0 2px 7px 1px #aaa; /* Cambia el shadow al hacer clic */
}
</style>




--- File: components\Spinner.vue ---

<!-- componente Spinner -->

<script setup></script>

<template>
  <div class="custom-loader" ></div>
</template>
<style scoped>
.custom-loader {
  width: 80px;
  height: 40px;
  --c:radial-gradient(farthest-side,#3A86FF 93%,#0000);
  background:
    var(--c) 0    0,
    var(--c) 50%  0;
  background-size:16px 16px;
  background-repeat: no-repeat;
  position: relative;
  clip-path: inset(-200% -100% 0 0);
  animation: db6-0 1.5s linear infinite;
}
.custom-loader:before {
  content: "";
  position: absolute;
  width: 16px;
  height: 24px;
  background:#3A86FF;
  left:-32px;
  top:0;
  animation: 
    db6-1 1.5s linear infinite,
    db6-2 0.5s cubic-bezier(0,200,.8,200) infinite;
}
.custom-loader:after {
  content: "";
  position: absolute;
  inset:0 0 auto auto;
  width:16px;
  height: 16px;
  border-radius: 50%;
  background:#3A86FF; 
  animation: db6-3 1.5s  linear infinite;
}

@keyframes db6-0 {
  0%,30%  {background-position: 0  0   ,50% 0   }
  33%     {background-position: 0  100%,50% 0   }
  41%,63% {background-position: 0  0   ,50% 0   }
  66%     {background-position: 0  0   ,50% 100%}
  74%,100%{background-position: 0  0   ,50% 0   }
}

@keyframes db6-1 {
  90%  {transform:translateY(0)}
  95%  {transform:translateY(30px)}
  100% {transform:translateY(30px);left:calc(100% - 16px)}
}

@keyframes db6-2 {
  100% {top:-0.2px}
}

@keyframes db6-3 {
  0%,80%,100% {transform:translate(0)}
  90%         {transform:translate(52px)}
}
</style>



--- File: components\SpinnerDog.vue ---



<template>
<div class="loader"></div>
</template>
<style scoped>
.loader {
  width: calc(6*30px);
  height: 50px;
  display: flex;
  color: #8d7958;
  filter: drop-shadow(30px 25px 0 currentColor) drop-shadow(60px 0 0 currentColor) drop-shadow(120px 0 0 currentColor);
  clip-path: inset(0 100% 0 0);
  animation: l12 2s infinite steps(7);
}
.loader:before {
  content: "";
  width: 30px;
  height: 25px;
  --c:no-repeat radial-gradient(farthest-side,currentColor 92%,#0000);
  background: 
    var(--c) left /70% 70%,
    var(--c) right/20% 20%,
    var(--c) top    0 right 15%/20% 20%,
    var(--c) bottom 0 right 15%/20% 20%;
}
@keyframes l12 {
  100% {clip-path: inset(0 -30px 0 0)}
}
</style>



--- File: components\UnderConstructionPage.vue ---

<!-- componente UnderContructionPage -->
<template>
    <div class="container">
      <div class="construction-icon">üöß</div>
      <div>
        <h2>Estamos trabajando en ello</h2>
      </div>

      <div>
        <p>¬°Volveremos pronto con algo incre√≠ble!</p>
      </div>
    </div>
</template>
<style scoped>
.container {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  padding: 3rem;
  font-family: Arial, sans-serif;
  background-color: #f3f3f3;
  color: #333;
  text-align: center;
}
h1 {
  font-size: 3em;
  margin-bottom: 0.5em;
}
p {
  font-size: 1.2em;
}
.construction-icon {
  font-size: 5em;
  margin-bottom: 0.5em;
}
</style>



--- File: composables\useErrorHandling.js ---

// useErrorHandling
import { ref } from "vue";

export const useErrorHandling = () => {
  const errorMessage = ref("");

  const errorMessages = {
    "auth/invalid-email": "El correo electr√≥nico proporcionado es inv√°lido.",
    "auth/user-disabled": "La cuenta de usuario ha sido deshabilitada.",
    "auth/user-not-found":
      "No se encontr√≥ ninguna cuenta de usuario asociada a este correo electr√≥nico.",
    "auth/wrong-password": "La contrase√±a proporcionada es incorrecta.",
    "auth/email-already-in-use": "El correo electr√≥nico ya est√° en uso.",
    "auth/weak-password": "La contrase√±a es d√©bil.",
    "auth/operation-not-allowed":
      "El inicio de sesi√≥n con correo electr√≥nico y contrase√±a no est√° habilitado en este momento.",
    "auth/invalid-credential": "Las credenciales proporcionadas son inv√°lidas.",
  };

  const handleErrorMessage = (error) => {
    errorMessage.value = errorMessages[error.code] || error.message;
  };

  return { errorMessage, handleErrorMessage };
};



--- File: composables\useImage.js ---

// useImage

import { ref, computed } from "vue";
import { useFirebaseStorage } from "vuefire"; // Importamos vuefire para trabajar con Firebase Storage
import {
  ref as storageRef,
  uploadBytesResumable,
  getDownloadURL,
} from "firebase/storage"; // Importamos funciones de Firebase Storage
import { uid } from "uid"; // Importamos uid para generar identificadores √∫nicos

const spinner = ref(false); // Definimos una referencia reactiva para el spinner

export default function useImage(directory) {
  const url = ref(""); // Definimos una referencia reactiva para la URL de la imagen
  const storage = useFirebaseStorage(); // Obtenemos una referencia a Firebase Storage

  const onFileChange = (e) => {
    const file = e.target.files[0]; // Obtenemos el primer archivo seleccionado
    const filename = uid() + ".jpg"; // Generamos un nombre de archivo √∫nico
    const sRef = storageRef(storage, directory + filename); // Creamos una referencia de almacenamiento en Firebase Storage

    // Subir el archivo
    const uploadTask = uploadBytesResumable(sRef, file); // Iniciamos la subida del archivo
    spinner.value = true; // Activamos el spinner durante la subida

    uploadTask.on(
      "state_changed",
      () => {}, // Podemos agregar un manejador para el progreso si lo deseamos
      (error) => {
        console.log(error); // Registramos el error en la consola
        spinner.value = false; // Apagamos el spinner en caso de error
      },
      () => {
        // La imagen ya se subi√≥
        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {
          url.value = downloadURL; // Asignamos la URL de descarga a la referencia reactiva
          spinner.value = false; // Apagamos el spinner cuando la subida finaliza
        });
      }
    );
  };

  const isImageUploaded = computed(() => {
    return url.value ? url.value : null; // Computed property que indica si la imagen se ha subido
  });

  return {
    url, // URL de la imagen subida
    onFileChange, // Funci√≥n para manejar el cambio de archivo
    isImageUploaded, // Computed property que indica si la imagen se ha subido
    spinner, // Estado del spinner
  };
}


--- File: composables\useLocationMap.js ---

// useLocationMap ok
import { ref } from "vue";

export default function useLocationMap() {
  const zoom = ref(17);
  const center = ref([41.4087724, 2.2018116]);
  const userLocation = ref(null);

  const pin = (e) => {
    const { lat, lng } = e.target.getLatLng();
    center.value = [lat, lng];
  };

  const updateLocation = (position) => {
    userLocation.value = [position.coords.latitude, position.coords.longitude];
    center.value = userLocation.value;
  };

  const handleError = (error) => {
    console.error("Error al obtener la ubicaci√≥n:", error.message);
  };

  const getUserLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(updateLocation, handleError);
    } else {
      console.error("Tu navegador no soporta geolocalizaci√≥n.");
    }
  };

  return {
    zoom,
    center,
    pin,
    getUserLocation,
  };
}




--- File: config\firebase.js ---

// firebase.js
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

// Configuraci√≥n de Firebase
const firebaseConfig = {
    apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
    authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
    storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
    appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

// Inicializar la aplicaci√≥n Firebase
export const firebaseApp = initializeApp(firebaseConfig);

// Inicializar el objeto auth
export const auth = getAuth();





--- File: estructura.txt ---
(Skipped (non-matching extension))


--- File: helpers\index.js ---


export * from './utils'


--- File: helpers\utils.js ---

// src/helpers/utils.js

export const limitCharacters = (data, field, maxLength) => {
    if (data[field].length > maxLength) {
      data[field] = data[field].substring(0, maxLength); // Limita los caracteres a la longitud m√°xima
    }
  };
  
  


--- File: lib\axios.js ---

//axios.js

import axios from "axios";

const api = axios.create({
  baseURL: "https://api.thedogapi.com/v1",
});

export default api;



--- File: main.js ---

//main.js

import "./assets/main.css";
import { createApp } from "vue";
import { createPinia } from "pinia";
import { VueFire, VueFireAuth } from "vuefire";
import { firebaseApp } from "./config/firebase";
import { plugin, defaultConfig } from "@formkit/vue";
import "@formkit/themes/genesis";

import { useToast } from "vue-toast-notification";
import "vue-toast-notification/dist/theme-sugar.css";
const $toast = useToast({
  duration: 1000,
  position: "top",
});

import App from "./App.vue";
import router from "./router";

const app = createApp(App);

app.provide("toast", $toast);
app.use(createPinia());
app.use(VueFire, {
  firebaseApp,
  modules: [VueFireAuth()],
});

app.use(plugin, defaultConfig);
app.use(router);

app.mount("#app");



--- File: router\index.js ---

import { inject } from "vue";
import { createRouter, createWebHistory } from "vue-router";
import { useFirebaseAuth } from "vuefire";
import { onAuthStateChanged } from "firebase/auth";
import HomeView from "../views/Home/HomeView.vue";
import { useAuthStore } from "@/stores/authStore";

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  // linkActiveClass: "active",
  routes: [
    {
      path: "/",
      name: "home",
      component: HomeView,
    },
    {
      path: "/admin",
      name: "admin",

      component: () => import("../views/Admin/AdminView.vue"),
      meta: { requiresAdmin: true }, // A√±adido
    },
    {
      path: "/informacion",
      name: "information",

      component: () => import("../views/Information/InformationView.vue"),
      children: [
        {
          path: "/",
          name: "care",

          component: () => import("../views/Information/CareTipsView.vue"),
        },
        {
          path: "/razas",
          name: "breeds",

          component: () => import("../views/Information/BreddsView.vue"),
        },
        {
          path: "/responsabilidad",
          name: "stewardship",

          component: () => import("../views/Information/StewardshipView.vue"),
        },
      ],
    },
    {
      path: "/adopcion",
      name: "adoption",
      component: () => import("../views/Adoption/AdoptionView.vue"),
    },
    {
      path: "/adopcion/agregar",
      name: "add-adoption",
      component: () => import("../views/Adoption/ReportAdoptionView.vue"),
    },
    {
      path: "/adopcion/listado",
      name: "adoption-list",
      component: () => import("../views/Adoption/ListDogsAdoption.vue"),
    },
    {
      path: "/adopcion/editar/:id",
      name: "edit-adoption",
      component: () => import("../views/Adoption/EditAdoptionDogVIew.vue"),
    },
    {
      path: "/adopcion/informacion/:id",
      name: "dog-information",
      component: () => import("../views/Adoption/DogInformationView.vue"),
    },

    {
      path: "/recursos",
      name: "resources",
      component: () => import("../views/ResourcesView.vue"),
    },
    {
      path: "/historias-inspiradoras",
      name: "inspiring-stories",
      component: () =>
        import("../views/InspiringStories/InspiringStoriesView.vue"),
    },
    {
      path: "/historias-inspiradoras/agregar",
      name: "add-inspiring-story",
      component: () =>
        import("../views/InspiringStories/ReportInspireStoryView.vue"),
    },
    {
      path: "/objetos",
      name: "lost-items",
      component: () => import("../views/Items/LostAndFoundView.vue"),
    },
    {
      path: "/objetos/encontrados",
      name: "found-items",
      component: () => import("../views/Items/ReportFoundItemView.vue"),
    },
    {
      path: "/objetos/editar/:id",
      name: "edit-item-found",
      component: () => import("../views/Items/EditFoundItemView.vue"),
    },
    {
      path: "/donar",
      name: "donate",
      component: () => import("../views/DonationView.vue"),
    },
    {
      path: "/sebusca",
      name: "lost-dogs",
      component: () => import("../views/LostDogs/LostAndFoundDogsView.vue"),
      meta: { requiresAuth: true },
    },
    {
      path: "/sebusca/encontrados",
      name: "found-dogs",
      component: () => import("../views/LostDogs/ReportDogFoundView.vue"),
    },
    {
      path: "/sebusca/editar/:id",
      name: "edit-lostDog-found",
      component: () => import("../views/LostDogs/EditFoundDogView.vue"),
    },
    {
      path: "/chat",
      name: "chat",
      component: () => import("../views/Chat/Chat.vue"),
      meta: { requiresAuth: true },
    },
    {
      path: "/login",
      name: "login",
      component: () => import("../views/LoginView.vue"),
    },
    {
      path: "/register",
      name: "register",
      component: () => import("../views/RegisterView.vue"),
    },
    {
      path: "/privacy-policy",
      name: "privacy-policy",
      component: () => import("../views/PrivacyPolicyView.vue"),
    },
    {
      path: "/:catchAll(.*)*",
      component: () => import("../views/ErrorNotFound.vue"),
    },
  ],
});

router.beforeEach(async (to, from, next) => {
  const toast = inject("toast");
  const authStore = useAuthStore();
  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);
  const requiresAdmin = to.matched.some((record) => record.meta.requiresAdmin);

  if (requiresAuth || requiresAdmin) {
    try {
      await athenticateUser();
      if (requiresAdmin && !authStore.isAdmin) {
        toast.open({
          message: "Acceso denegado: solo para administradores.",
          type: "error",
        });
        next({ name: "home" }); // Redirigir a home si no es administrador
      } else {
        next();
      }
    } catch (error) {
      toast.open({
        message: "Solo para usuarios registrados.",
        type: "error",
      });
      next({ name: "login" }); // Redirigir a login si no est√° autenticado
    }
  } else {
    next();
  }
});

function athenticateUser() {
  const auth = useFirebaseAuth();
  return new Promise((resolve, reject) => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      unsubscribe();
      if (user) {
        resolve();
      } else {
        reject();
      }
    });
  });
}
export default router;



--- File: share\Footer.vue ---

<!-- Footer.vue OK-->
<script setup>
import { RouterLink } from "vue-router";
const socialLinks = [
  {
    href: "https://www.linkedin.com/in/yubal-hormiga/",
    iconClass: "fa-linkedin",
    alt: "LinkedIn",
  },
  {
    href: "https://github.com/YubalHormiga",
    iconClass: "fa-github",
    alt: "GitHub",
  },
];
</script>

<template>
  <footer class="footer-container">
    <div itemscope itemtype="http://schema.org/WPFooter" class="media">
      <div>
        <p class="footer-text" itemprop="copyrightHolder">
          &copy; 2024 <span itemprop="name">Yubal Hormiga</span>
        </p>
      </div>
      <div align="center" class="socialbtns">
        <ul>
          <li v-for="link in socialLinks" :key="link.alt">
            <a
              :href="link.href"
              class="fa fa-lg"
              :class="link.iconClass"
              :alt="link.alt"
              target="_blank"
            >
              <!-- Enlace visible para accesibilidad -->
              <span class="sr-only">{{ link.alt }}</span>
            </a>
          </li>
        </ul>
      </div>
    </div>
    <div class="footer-links">
      <div class="links">
        <a href="mailto:yubalhh@yahoo.es" itemprop="url">Contact</a>
      </div>
      <div>
        <RouterLink :to="{ name: 'privacy-policy' }" itemprop="url"
          >Privacy Policy</RouterLink
        >
      </div>
    </div>
  </footer>
</template>
<!-- Se ha a√±adido un esquema de microdatos usando itemscope y itemtype para definir el WPFooter. Tambi√©n se ha a√±adido itemprop a los elementos relevantes para indicar el titular del copyright y las URLs. -->
<style scoped>
/* Estilo para ocultar el texto visible pero accesible */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}
.media {
  display: flex;
  justify-content: center;
  gap: 1rem;
}

.footer-container {
  display: flex;
  flex-direction: column;
  padding: 1rem;
}

.footer-text {
  margin: 0;
  text-align: center;
  color: var(--text-200);
}

.footer-links {
  list-style-type: none;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  gap: 1rem;
}

.footer-links a {
  text-decoration: none;
  color: var(--text-100);
}

.footer-links a:hover {
  border-bottom: 2px solid var(--accent-100);
}

/*Social */

a,
a:hover {
  color: #000;
  text-decoration: none;
  padding: 5px;
}

.socialbtnsbtnsbtns,
.socialbtnsbtnsbtns ul,
.socialbtnsbtnsbtns li {
  margin: 0;
  padding: 5px;
}

.socialbtnsbtnsbtns li {
  list-style: none outside none;
  display: inline-block;
}

.socialbtns li {
  list-style: none outside none;
  display: inline-block;
}

.socialbtns .fa {
  color: #fff;
  text-shadow: 1px 1px 0px #000, 1px -1px 0px #000, -1px 1px 0px #000,
    -1px -1px 0px #000;
  -webkit-text-shadow: 1px 1px 0px #000, 1px -1px 0px #000, -1px 1px 0px #000,
    -1px -1px 0px #000;
  -moz-text-shadow: 1px 1px 0px #000, 1px -1px 0px #000, -1px 1px 0px #000,
    -1px -1px 0px #000;
  -o-text-shadow: 1px 1px 0px #000, 1px -1px 0px #000, -1px 1px 0px #000,
    -1px -1px 0px #000;
  transition: all ease-out 0.5s;
  -moz-transition: all ease-out 0.5s;
  -webkit-transition: all ease-out 0.5s;
  -o-transition: all ease-out 0.5s;
}

.socialbtns .fa:hover {
  color: #000;
  text-shadow: 1px 1px 0px #fff, 1px -1px 0px #fff, -1px 1px 0px #fff,
    -1px -1px 0px #fff;
  -webkit-text-shadow: 1px 1px 0px #fff, 1px -1px 0px #fff, -1px 1px 0px #fff,
    -1px -1px 0px #fff;
  -moz-text-shadow: 1px 1px 0px #fff, 1px -1px 0px #fff, -1px 1px 0px #fff,
    -1px -1px 0px #fff;
  -o-text-shadow: 1px 1px 0px #fff, 1px -1px 0px #fff, -1px 1px 0px #fff,
    -1px -1px 0px #fff;
  transition: all ease 0.5s;
  -moz-transition: all ease-in 0.5s;
  -webkit-transition: all ease-in 0.5s;
  -o-transition: all ease-in 0.5s;
}
</style>



--- File: share\Header.vue ---

<!-- Header  OK-->
<template>
  <header class="header">
    <!-- Nombre del sitio -->
    <div class="site-name">
      <h1 class="name">CanineConnect</h1>
      <h2 class="neighborhood">Sant Mart√≠</h2>
    </div>
  </header>
</template>

<style scoped>
/* Estilos para el encabezado */

.header {
  color: white;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  position: relative;
  min-height: 15vh;
  height: auto;
  padding: 2rem;
}
.name {
  font-size: clamp(4rem, 4vw + 1.5rem, 13.25rem);
  margin: 3rem 0 0 0;
}
.site-name {
  display: flex;
  flex-direction: column;
  align-items: center;
}
@media (min-width: 640px) {
  .site-name {
    display: flex;
    flex-direction: row;
    gap: 4rem;
    align-items: baseline;
  }
}

.neighborhood {
  font-size: clamp(0.5rem, 4vw + 1.5rem, 5.25rem);
  margin: 0;
  text-align: center;
  font-family: "Whisper", cursive;
  font-weight: 900;
  font-style: normal;
  margin: 0;
}
</style>



--- File: share\MainNavigation.vue ---

<!-- MainNavigation.vue -->
<script setup>
import { ref, onMounted, onBeforeUnmount } from "vue";
import { RouterLink } from "vue-router";
import { useRoute } from "vue-router";
import { storeToRefs } from "pinia";

import LogoutUser from "@/assets/icons/LogoutUser.vue";
import LoginUser from "@/assets/icons/LoginUser.vue";

import { useAuthStore } from "@/stores/authStore";

const navItems = [
  { text: "Inicio", to: "/" },
  { text: "Peludos Perdidos", to: { name: "lost-dogs" } },
  { text: "Objetos Perdidos", to: { name: "lost-items" } },
  { text: "Adopci√≥n", to: { name: "adoption" } },
  /* { text: "Recursos", to: { name: "resources" } },*/
  { text: "Historias Inspiradoras", to: { name: "inspiring-stories" } },
  { text: "Chat", to: { name: "chat" } },
  { text: "Donar", to: { name: "donate" } },
  { text: "Informaci√≥n", to: { name: "care" } },
];

const authStore = useAuthStore();
const route = useRoute();
const { isLoggedIn, userData, isAdmin } = storeToRefs(authStore);
const { logoutUser } = authStore;
const isMenuOpen = ref(false);

const toggleMenu = () => {
  isMenuOpen.value = !isMenuOpen.value;
};

const closeMenu = (event) => {
  if (!event.target.closest(".navigation")) {
    isMenuOpen.value = false;
  }
};

const darkMode = () => {
  document.body.classList.toggle("darkMode");
};

const handleNavItemClick = () => {
  isMenuOpen.value = false;
};

onMounted(() => {
  document.addEventListener("click", closeMenu);
});

onBeforeUnmount(() => {
  document.removeEventListener("click", closeMenu);
});
</script>

<template>
  <div class="nav-container" :class="{ open: isMenuOpen }">
    <nav class="navigation">
      <div class="left-section">
        <div
          class="hamburger-menu"
          :class="{ open: isMenuOpen }"
          @click="toggleMenu"
          aria-label="Toggle Menu"
        >
          <span class="bar bar1"></span>
          <span class="bar bar2"></span>
          <span class="bar bar3"></span>
        </div>
      </div>
      <div v-if="isLoggedIn && route.name !== 'login'" class="welcome-content">
        <p>
          Hola: <span> {{ userData?.displayName ?? "Usuario" }}</span>
        </p>
      </div>
      <div :class="['nav-items', { open: isMenuOpen }]">
        <div class="nav-item" v-for="(item, index) in navItems" :key="index">
          <router-link
            active-class="active-link"
            class="nav-link"
            :to="item.to"
            @click="handleNavItemClick"
            >{{ item.text }}</router-link
          >
        </div>
        <div v-if="isAdmin" class="nav-item">
          <router-link
            active-class="active-link"
            class="nav-link"
            :to="{ name: 'admin' }"
            @click="handleNavItemClick"
            >Administraci√≥n</router-link
          >
        </div>
      </div>

      <div class="right-section">
        <div v-if="isLoggedIn && route.name !== 'login'" class="logout-link">
          <router-link
            class="logoutUser"
            @click="logoutUser"
            :to="{ name: 'home' }"
          >
            <LogoutUser />
          </router-link>
        </div>
        <div
          v-else-if="route.name !== 'login' && route.name !== 'register'"
          class="login-container"
        >
          <router-link :to="{ name: 'login' }" class="login-link">
            <LoginUser />
          </router-link>
        </div>
      </div>
    </nav>
  </div>
</template>

<style scoped>
/* DarkMode */
.darkModeIcon {
  width: 3rem;
  height: auto;
  filter: invert(100%);
  cursor: pointer;
  margin-left: 1rem;
  /* visibility: hidden; */
}

/* Hamburguer */
.hamburger-menu {
  display: none;
  flex-direction: column;
  cursor: pointer;
  transition: all 0.3s ease;
}

.hamburger-menu .bar {
  width: 30px;
  height: 3px;
  background-color: #ffffff;
  margin: 5px 0;
  transition: all 0.3s ease;
}

.hamburger-menu.open .bar1 {
  transform: rotate(45deg) translate(10px, 8px);
}

.hamburger-menu.open .bar2 {
  opacity: 0;
}

.hamburger-menu.open .bar3 {
  transform: rotate(-45deg) translate(10px, -8px);
}

@media (max-width: 640px) {
  .hamburger-menu {
    display: flex;
  }

  .nav-items {
    position: absolute;
    top: 100%;
    left: 0;
    flex-direction: column;
    background-color: rgba(40, 68, 49, 0.3);
    width: 100%;
    display: none;
    transition: max-height 0.3s ease;
    overflow: hidden;
    max-height: 0;
  }

  .nav-items.open {
    display: flex;
    max-height: max-content;
  }

  .nav-item {
    width: 100%;
    text-align: center;
  }

  .left-section,
  .right-section {
    flex: 1;
  }

  .right-section {
    justify-content: flex-end;
  }

  .welcome-content,
  .logout-link,
  .login-container {
    margin-left: 1rem;
    margin-right: 1rem;
  }
}

/* Resto del CSS */
.nav-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0;
  width: 100%;
  background-color: rgba(40, 68, 49, 0.3);
  transition: background-color 0.3s ease;
}

.navigation {
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  justify-content: space-evenly;
  align-items: center;
  position: relative;
  z-index: 10000;
}

.left-section,
.right-section {
  display: flex;
  align-items: center;
  margin-left: 0.3rem;
}

.right-section {
  justify-content: flex-end;
}

.logout-link,
.login-container {
  display: flex;
  margin: 0.5rem;
}

.welcome-content {
  margin: 0 0.5rem;
  padding: 0.5rem;
  background-color: rgba(255, 255, 255, 0.2);
  border-radius: 0.3rem;
  color: var(--bg-0);
}

.welcome-content span {
  color: var(--accent-100);
}

.nav-items {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-around;
  transition: max-height 0.3s ease;
}

.nav-items.open {
  max-height: max-content;
}

.nav-item {
  display: flex;
  text-align: center;
}

.nav-link {
  justify-content: center;
  text-decoration: none;
  color: rgba(255, 255, 255, 0.9);
  padding: 1rem;
}

.active-link {
  color: var(--accent-100);
  font-weight: 700;
}

@media (min-width: 640px) {
  .nav-items {
    flex: 1;
    justify-content: center;
  }

  .left-section {
    display: none;
  }

  .right-section {
    flex: none;
  }

  .welcome-content {
    display: flex;
  }
}
</style>



--- File: stores\adoptionStore.js ---

import { defineStore } from "pinia";
import { useCollection, useFirebaseStorage, useFirestore } from "vuefire";
import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  getDoc,
  query,
  updateDoc,
} from "firebase/firestore";
import { ref as storageRef, deleteObject } from "firebase/storage";

export const useAdoptionStore = defineStore("adoption", () => {
  const db = useFirestore();
  const storage = useFirebaseStorage();

  const adoptionsQuery = query(collection(db, "adoptions"));
  const adoptionsCollection = useCollection(adoptionsQuery);

  async function createAdoption(adoption) {
    try {
      console.log(adoption);
      await addDoc(collection(db, "adoptions"), adoption);
    } catch (error) {
      console.log(error);
    }
  }

  // Funci√≥n para actualizar una mascota existente
  async function updateAdoptionDog(docRef, dog) {
    try {
      const docSnap = await getDoc(docRef); // Obtenemos los datos actuales del documento
      const oldData = docSnap.data(); // Almacenamos los datos actuales del documento

      const { image, url, ...values } = dog; // Separar la imagen y la URL de los otros valores

      if (image.length) {
        if (oldData && oldData.image) {
          const oldImageRef = storageRef(storage, oldData.image); // Referencia a la imagen anterior en Firebase Storage
          await deleteObject(oldImageRef); // Eliminamos la imagen anterior de Firebase Storage
        }
        await updateDoc(docRef, {
          ...values,
          image: url.value, // Actualizamos el documento con la nueva imagen
        });
      } else {
        await updateDoc(docRef, values); // Actualizamos el documento sin cambiar la imagen
      }
    } catch (error) {
      console.error("Error al actualizar el item:", error); // Manejo de errores
    }
  }

  const deleteAdoptionDog = async (id) => {
    try {
      const docRef = doc(db, "adoptions", id);

      const docSnap = await getDoc(docRef); // Obtenemos los datos actuales del documento
      const { image } = docSnap.data(); // Extraemos la URL de la imagen del documento
      const imageRef = storageRef(storage, image); // Creamos una referencia a la imagen en Firebase Storage

      await deleteDoc(docRef);
      await deleteObject(imageRef);
    } catch (error) {
      console.log(error);
    }
  };
  return {
    createAdoption,
    adoptionsCollection,
    updateAdoptionDog,
    deleteAdoptionDog,
  };
});



--- File: stores\authStore.js ---

// authStore
import { ref, inject } from "vue";
import { useRouter } from "vue-router";
import { defineStore } from "pinia";
import { useFirebaseAuth, useFirestore } from "vuefire";
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  updateProfile,
} from "firebase/auth";
import { doc, getDoc, setDoc } from "firebase/firestore";

import { useErrorHandling } from "../composables/useErrorHandling";

export const useAuthStore = defineStore("auth", () => {
  const auth = useFirebaseAuth(); // Usar VueFireAuth para obtener la referencia de auth
  const db = useFirestore();
  const router = useRouter();
  const toast = inject("toast");
  const { errorMessage, handleErrorMessage } = useErrorHandling();

  // State
  const userData = ref(null);
  const isLoggedIn = ref(false);
  const isAdmin = ref(false);

  // Actions
  const register = async (email, password, displayName) => {
    try {
      const { user } = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      await updateProfile(user, {
        displayName: displayName,
      });
      await setDoc(doc(db, "users", user.uid), {
        uid: user.uid,
        email: user.email,
        displayName,
        isAdmin: false,
      });
      handleAuthSuccess(user);
      handleToastSuccess("¬°Registro exitoso!");
    } catch (error) {
      handleErrorMessage(error);
      handleToastError();
    }
  };

  const login = async (email, password) => {
    try {
      const { user } = await signInWithEmailAndPassword(auth, email, password);
      handleAuthSuccess(user);
      handleToastSuccess("¬°Inicio de sesi√≥n exitoso!");
    } catch (error) {
      handleErrorMessage(error);
      handleToastError();
    }
  };

  const logoutUser = async () => {
    try {
      await signOut(auth);
      router.push({ name: "login" });
      isLoggedIn.value = false;
      handleToastSuccess("Se ha cerrado sesi√≥n correctamente.");
    } catch (error) {
      handleErrorMessage(error);
      handleToastError();
    }
  };

  // Helper functions
  const handleAuthSuccess = async (user) => {
    userData.value = {
      email: user.email,
      uid: user.uid,
      displayName: user.displayName || "",
    };
    router.push({ name: "home" });
    isLoggedIn.value = true;

    const userRef = doc(db, "users", user.uid);
    const snapShot = await getDoc(userRef);
    if (snapShot.exists()) {
      const userData = snapShot.data();
      isAdmin.value = userData.isAdmin || false;
    } else {
      isAdmin.value = false;
    }
  };

  const handleToastError = () => {
    toast.open({
      message: errorMessage.value,
      type: "error",
    });
  };

  const handleToastSuccess = (message) => {
    toast.open({
      message: `${message}`,
      type: "success",
    });
  };

  // Verificar el estado de autenticaci√≥n al cargar el store
  auth.onAuthStateChanged(async (user) => {
    if (user) {
      userData.value = {
        email: user.email,
        uid: user.uid,
        displayName: user.displayName || "",
      };
      isLoggedIn.value = true;

      const userRef = doc(db, "users", user.uid);
      const snapShot = await getDoc(userRef);
      if (snapShot.exists()) {
        const userData = snapShot.data();
        isAdmin.value = userData.isAdmin || false;
      } else {
        isAdmin.value = false;
      }
    } else {
      userData.value = null;
      isLoggedIn.value = false;
      isAdmin.value = false;
    }
  });

  return { userData, register, login, logoutUser, isLoggedIn, isAdmin };
});



--- File: stores\chatStore.js ---

// chatStore 
import { computed } from "vue";
import { defineStore } from "pinia";
import { useCollection, useFirestore } from "vuefire";
import {
  addDoc,
  collection,
  doc,
  deleteDoc,
  query,
  limit,
  orderBy,
  Timestamp,
} from "firebase/firestore";

export const useChatStore = defineStore("chatStore", () => {
  const db = useFirestore();

  // Define una consulta para recuperar todos los documentos de la colecci√≥n "messages"
  const chatsQuery = query(collection(db, "messages"), orderBy("timestamp"));

  // Usa `useCollection` para mantener una colecci√≥n reactiva de mensajes con una clave SSR manual
  const { data: messagesCollection } = useCollection(chatsQuery, {
    ssrKey: "chat-messages",
  });

  // Funci√≥n para enviar un nuevo mensaje
  const sendMessage = async (message, displayName, uid) => {
    try {
      await addDoc(collection(db, "messages"), {
        text: message,
        displayName: displayName, // Incluye el nombre del usuario
        uid: uid,
        timestamp: Timestamp.fromDate(new Date()), // Agrega el timestamp aqu√≠
      });
    } catch (error) {
      console.error("Error al agregar documento: ", error);
    }
  };

  const deleteMessage = async (id) => {
    if (confirm("Eliminar mensaje")) {
      try {
        const docRef = doc(db, "messages", id);
        await deleteDoc(docRef);
      } catch (error) {
        console.log("Error al eliminar el item:", error);
      }
    }
  };
  // Propiedad computada para verificar si no hay mensajes
  const noResults = computed(() => {
    return messagesCollection.value.length === 0;
  });

  return { sendMessage, messagesCollection, noResults, deleteMessage };
});



--- File: stores\dogBreedsStore.js ---

/* useDogBreedsStore */
import { ref } from "vue";
import { defineStore } from "pinia";
import { fetchData } from "@/api/DogsAPI.js"; 

export const useDogBreedsStore  = defineStore("dogs", () => {
  const dogBreedsData = ref([]);

  const fetchDogBreedsData = async () => {
    dogBreedsData.value = await fetchData();
  };

  return {
    dogBreedsData,
    fetchDogBreedsData,
  };
});




--- File: stores\itemsStore.js ---

// itemsStore
import { computed } from "vue";
import { defineStore } from "pinia";
import { useFirestore, useCollection, useFirebaseStorage } from "vuefire";
import {
  collection,
  addDoc,
  query,
  getDoc,
  updateDoc,
  deleteDoc,
  doc,
} from "firebase/firestore";
import { ref as storageRef, deleteObject } from "firebase/storage";
/* Definici√≥n de la tienda (store) de items */
export const useItemsStore = defineStore("itemsStore", () => {
  const db = useFirestore(); // Obtenemos una referencia a Firestore
  const storage = useFirebaseStorage(); // Obtenemos una referencia a Firebase Storage

  // Definimos una consulta para recuperar todos los documentos de la colecci√≥n "items"
  const itemsQuery = query(collection(db, "items"));

  // Usamos `useCollection` para mantener una colecci√≥n reactiva de items
  const itemsCollection = useCollection(itemsQuery);

  // Funci√≥n para crear un nuevo item
  async function createItem(item) {
    try {
      await addDoc(collection(db, "items"), item); // A√±adimos un nuevo documento (item) a la colecci√≥n "items" en Firestore
    } catch (error) {
      console.error("Error al crear el item:", error); // Manejo de errores
    }
  }

  // Funci√≥n para actualizar un item existente
  async function updateItem(docRef, item) {
    try {
      const docSnap = await getDoc(docRef); // Obtenemos los datos actuales del documento
      const oldData = docSnap.data(); // Almacenamos los datos actuales del documento

      const { image, url, ...values } = item; // Separar la imagen y la URL de los otros valores

      if (image.length) {
        if (oldData && oldData.image) {
          const oldImageRef = storageRef(storage, oldData.image); // Referencia a la imagen anterior en Firebase Storage
          await deleteObject(oldImageRef); // Eliminamos la imagen anterior de Firebase Storage
        }

        await updateDoc(docRef, {
          ...values,
          image: url.value, // Actualizamos el documento con la nueva imagen
        });
      } else {
        await updateDoc(docRef, values); // Actualizamos el documento sin cambiar la imagen
      }
    } catch (error) {
      console.error("Error al actualizar el item:", error); // Manejo de errores
    }
  }

  // Funci√≥n para eliminar un item
  async function deleteItem(id) {
    if (confirm("Eliminar Producto")) {
      try {
        const docRef = doc(db, "items", id); // Creamos una referencia al documento que queremos eliminar
        const docSnap = await getDoc(docRef); // Obtenemos los datos actuales del documento
        const { image } = docSnap.data(); // Extraemos la URL de la imagen del documento
        const imageRef = storageRef(storage, image); // Creamos una referencia a la imagen en Firebase Storage

        await deleteDoc(docRef); // Eliminamos el documento de Firestore
        await deleteObject(imageRef); // Eliminamos la imagen de Firebase Storage
      } catch (error) {
        console.error("Error al eliminar el item:", error); // Manejo de errores
      }
    }
  }

  // Funci√≥n para eliminar un item
  async function deleteItem(id) {
    if (confirm("Eliminar Producto")) {
      try {
        const docRef = doc(db, "items", id); // Creamos una referencia al documento que queremos eliminar
        const docSnap = await getDoc(docRef); // Obtenemos los datos actuales del documento
        const { image } = docSnap.data(); // Extraemos la URL de la imagen del documento
        const imageRef = storageRef(storage, image); // Creamos una referencia a la imagen en Firebase Storage

        await deleteDoc(docRef); // Eliminamos el documento de Firestore
        await deleteObject(imageRef); // Eliminamos la imagen de Firebase Storage
      } catch (error) {
        console.error("Error al eliminar el item:", error); // Manejo de errores
      }
    }
  }

  // Propiedad computada para verificar si no hay resultados
  const noResults = computed(() => itemsCollection.value.length === 0); // Computed property para verificar si no hay resultados

  return {
    createItem,
    updateItem,
    deleteItem,
    itemsCollection,
    noResults,
  };
});



--- File: stores\lostDogsStore.js ---

import { defineStore } from "pinia";
import { useCollection, useFirestore, useFirebaseStorage } from "vuefire";
import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  getDoc,
  query,
  updateDoc,
} from "firebase/firestore";
import { ref as storageRef, deleteObject } from "firebase/storage";


export const useLostDogsStore = defineStore("lostDogs", () => {
  const db = useFirestore();
  const storage = useFirebaseStorage();

  const lostDogstQuery = query(collection(db, "lostDogs"));
  const lostDogsCollection = useCollection(lostDogstQuery);

  const addLostDog = async (dog) => {
    try {
      await addDoc(collection(db, "lostDogs"), dog);
      console.log(dog);
    } catch (error) {
      console.log(error);
    }
  };

  // Funci√≥n para actualizar una mascota existente
  async function updateLostDog(docRef, dog) {
    try {
      const docSnap = await getDoc(docRef); // Obtenemos los datos actuales del documento
      const oldData = docSnap.data(); // Almacenamos los datos actuales del documento

      const { image, url, ...values } = dog; // Separar la imagen y la URL de los otros valores

      if (image.length) {
        if (oldData && oldData.image) {
          const oldImageRef = storageRef(storage, oldData.image); // Referencia a la imagen anterior en Firebase Storage
          await deleteObject(oldImageRef); // Eliminamos la imagen anterior de Firebase Storage
        }
        await updateDoc(docRef, {
          ...values,
          image: url.value, // Actualizamos el documento con la nueva imagen
        });
      } else {
        await updateDoc(docRef, values); // Actualizamos el documento sin cambiar la imagen
      }
    } catch (error) {
      console.error("Error al actualizar el item:", error); // Manejo de errores
    }
  }


  const deleteLostDog = async (id) => {
    try {
      const docRef = doc(db, "lostDogs", id);

      const docSnap = await getDoc(docRef); // Obtenemos los datos actuales del documento
      const { image } = docSnap.data(); // Extraemos la URL de la imagen del documento
      const imageRef = storageRef(storage, image); // Creamos una referencia a la imagen en Firebase Storage

      await deleteDoc(docRef);
      await deleteObject(imageRef);
    } catch (error) {
      console.log(error);
    }
  };

  return { addLostDog, lostDogsCollection,updateLostDog, deleteLostDog };
});



--- File: stores\storyStore.js ---

//useInspiringStore

import { query } from "firebase/database";
import { addDoc, collection } from "firebase/firestore";
import { defineStore } from "pinia";
import { useCollection, useFirestore } from "vuefire";

export const useStoryStore = defineStore("inspiring", () => {
  //Obtenemos referencia
  const db = useFirestore();

  // Definimos una consulta para recuperar todos los documentos de la colecci√≥n "items"
  const storiesQuery = query(collection(db, "storys"));

  // Usamos `useCollection` para mantener una colecci√≥n reactiva de items
  const storiesCollection = useCollection(storiesQuery);

  //Funci√≥n para crear una hisoria
  async function createStory(story) {
    try {
      await addDoc(collection(db, "storys"), story);
    } catch (error) {
      console.log(error);
    }
  }

  return { createStory, storiesCollection };
});



--- File: todo_el_contenido.txt ---
(Skipped (non-matching extension))


--- File: validation\authSchema.js ---

// authSchema 
export const authSchema = {
  // Validaci√≥n de correo electr√≥nico
  email(value) {
    if (!value) {
      return "Este campo es obligatorio";
    }
    const regexEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!regexEmail.test(value)) {
      return "Email no v√°lido";
    }
    return true;
  },
  // Validaci√≥n de contrase√±a
  password(value) {
    if (!value) {
      return "El Password es Obligatorio";
    }
    const regexPassword = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,}$/;
    if (!regexPassword.test(value)) {
      return "La contrase√±a no cumple con los criterios de seguridad";
    }
    return true;
  },
};



--- File: views\Admin\AdminView.vue ---

<script setup>
    import { ref, computed, watchEffect } from "vue";
    import { useFirestore, useCollection } from "vuefire";
    import { collection, query, doc, updateDoc } from "firebase/firestore";

    // Inicializa Firestore
    const db = useFirestore();

    // Crea una consulta para la colecci√≥n "users"
    const usersQuery = query(collection(db, "users"));

    // Usa la consulta para obtener la colecci√≥n
    const { data: usersCollection, error } = useCollection(usersQuery);

    // Almacena los datos en una variable reactiva
    const users = ref([]);
    const searchTerm = ref("");

    // Funci√≥n para actualizar el estado de administrador
    const toggleAdminStatus = async (user) => {
      try {
        const userRef = doc(db, "users", user.uid);
        await updateDoc(userRef, {
          isAdmin: !user.isAdmin,
        });
        // Actualiza el estado local despu√©s de la actualizaci√≥n
        user.isAdmin = !user.isAdmin;
      } catch (e) {
        console.error("Error updating admin status:", e);
      }
    };

    // Filtrar usuarios seg√∫n el t√©rmino de b√∫squeda
    const filteredUsers = computed(() => {
      if (!searchTerm.value) {
        return users.value;
      }
      return users.value.filter(
        (user) =>
          user.email.toLowerCase().includes(searchTerm.value.toLowerCase()) ||
          user.displayName.toLowerCase().includes(searchTerm.value.toLowerCase())
      );
    });

    watchEffect(() => {
      if (usersCollection.value) {
        users.value = usersCollection.value;
      }
      if (error.value) {
        console.error("Error fetching users:", error.value);
      }
    });
  </script>

<template>
<div class="admin-container">
    <h2 class="admin-title">Panel de Administraci√≥n</h2>
    <p>Introduce usuario para asignar o quitar permisos de administrador.</p>
    <input
      v-model="searchTerm"
      placeholder="Buscar por correo o nombre"
      type="text"
      class="admin-search"
    />
    <div v-for="user in filteredUsers" :key="user.uid" class="admin-user-card">
      <div class="user-data">
        <p class="user-name">Nombre: {{ user.displayName }}</p>
        <p class="user-email">Email: {{ user.email }}</p>
      </div>
      <div>
        <button
          @click="toggleAdminStatus(user)"
          class="admin-toggle-button"
          :style="{ backgroundColor: user.isAdmin ? 'red' : 'blue' }"
        >
          {{ user.isAdmin ? "Quitar" : "Poner" }}
        </button>
      </div>
    </div>
  </div>
</template>

<style scoped>
.admin-container {
  padding: 1rem;
  max-width: 60rem;
  margin: auto;
}

.admin-title {
  font-size: 2rem;
  margin-bottom: 1rem;
}

.admin-search {
  margin: 1rem 0;
  min-width: 30rem;
  padding: 0.5rem;
  font-size: 1rem;
}

.admin-user-card {
  display: flex;
  flex-direction: column;
  margin-bottom: 1rem;
  border-bottom: 1px solid rgb(218, 212, 209);
  max-width: 50rem;
  padding: 0.5rem 0;
}

@media (min-width: 640px) {
  .admin-user-card {
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
  }
}

.user-data {
  min-width: 40rem;
}

.user-name,
.user-email {
  font-size: 1rem;
  margin: 0;
}

.admin-toggle-button {
  color: white;
  border: none;
  border-radius: 5px;
  padding: 0.5rem;
  margin-bottom: 1rem;
  cursor: pointer;
}
</style>


--- File: views\Adoption\AdoptionCardView.vue ---

<script setup>
import { computed } from "vue";
import { RouterLink } from "vue-router";

import { useAdoptionStore } from "@/stores/adoptionStore";
import { useAuthStore } from "@/stores/authStore";

import EditIcon from "../../assets/icons/EditIcon.vue";
import DeleteIcon from "../../assets/icons/DeleteIcon.vue";

const props = defineProps({
  adoption: {
    type: Object,
    require: true,
  },
});

const authStore = useAuthStore();
/* Propiedad computada para verificar si el usuario actual es el propietario del objeto */
const isOwner = computed(
  () => props.adoption.userId === authStore.userData?.uid
);

const adoptionStore = useAdoptionStore();
</script>
<template>
  <div class="list-dogs">
    <div class="card-container">
      <div class="image-container">
        <img :src="adoption.image" :alt="adoption.name" />
      </div>
      <div class="text-container">
        <h2 class="name">{{ adoption.dogName }}</h2>
        <h3 class="waiting">{{ adoption.dogBreed }}</h3>
        <h4 class="needs">{{ adoption.title }}</h4>
      </div>
      <div class="button-container">
        <RouterLink
          :to="{ name: 'dog-information', params: { id: adoption.id } }"
          class="more-info"
          >M√°s informacion</RouterLink
        >
      </div>
      <div class="isOwner" v-if="isOwner">
        <div>
          <RouterLink
            :to="{ name: 'edit-adoption', params: { id: adoption.id } }"
          >
            <EditIcon />
          </RouterLink>
        </div>
        <div>
          <button
            type="button"
            @click="adoptionStore.deleteAdoptionDog(adoption.id)"
          >
            <DeleteIcon />
          </button>
        </div>
      </div>
    </div>
  </div>
</template>
<style scoped>
h2 {
  color: var(--accent-100);
}
h3 {
  color: var(--accent-200);
}
.gender {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}
.card-container {
  width: 25rem;
  overflow: hidden;
  box-shadow: 0.25rem 0.25rem 0.5rem rgba(0, 0, 0, 0.25);
  margin-bottom: 1rem;
  text-align: center;
}
.image-container {
}
.image-container img {
  width: 100%;
  height: 20rem;
  display: block;
  object-fit: cover;
}
.text-container {
}
.name {
}
.waiting {
}
.needs {
}
.button-container {
  cursor: pointer;
  background-color: var(--bg-100);
  padding: 0.3rem;
}
.isOwner {
  display: flex;
  background-color: var(--bg-100);
  justify-content: space-between;
  padding: 0.5rem;
}
.more-info {
  color: var(--bg-0);
  text-decoration: none;
}
</style>



--- File: views\Adoption\AdoptionView.vue ---

<script setup>
import Link from "@/components/Link.vue";
import { useAuthStore } from "@/stores/authStore";
import { RouterLink } from "vue-router";

const infoGuide = [
  {
    title: "Explora Perfiles:",
    text: "Navega a trav√©s de una amplia variedad de perros de diferentes tama√±os, edades y personalidades. Cada perfil incluye fotos y una descripci√≥n detallada para ayudarte a encontrar al perro ideal para ti.",
  },
  {
    title: "Encuentra el Compa√±ero Ideal:",
    text: " Utiliza nuestros filtros de b√∫squeda para ajustar las opciones seg√∫n tus preferencias y necesidades, como tama√±o, raza, nivel de actividad y m√°s.",
  },
  {
    title: "Solicita una Adopci√≥n:",
    text: "Cuando encuentres al perro que te enamora, completa la solicitud de adopci√≥n directamente en nuestra plataforma. Podr√°s proporcionarnos detalles sobre tu hogar y tu experiencia con mascotas.",
  },
  {
    title: "Conecta con las Protectores:",
    text: "Recibir√°s una respuesta de la protectora o refugio encargado del perro. Ellos te proporcionar√°n m√°s informaci√≥n y coordinar√°n los siguientes pasos para una posible adopci√≥n.",
  },
  {
    title: "Prep√°rate para la Llegada:",
    text: "Una vez aprobada tu solicitud, prepara tu hogar para recibir a tu nuevo amigo y empieza a disfrutar de la maravillosa experiencia de tener un perro.",
  },
];
const whyAdopt = [
  {
    title: "Amor Incondicional:",
    text: "Los perros adoptados son agradecidos y se integran con amor y lealtad en sus nuevos hogares.",
  },
  {
    title: "Cambio de Vida:",
    text: "Est√°s dando a un perro la oportunidad de una vida mejor y ayudando a reducir el n√∫mero de animales sin hogar.",
  },
  {
    title: "Compa√±√≠a y Alegr√≠a: ",
    text: " Un perro puede ser el mejor amigo, compa√±ero de aventuras y una fuente constante de alegr√≠a.",
  },
];

const authStore = useAuthStore();
</script>

<template>
  <Link to="add-adoption" v-if="authStore.isAdmin" A√±adir Adopci√≥n
    >A√±adir perro en adopci√≥n</Link
  >
  <header>
    <h2>¬°Encuentra a tu Nuevo Mejor Amigo en CanineConnect!</h2> 
   
  </header>

  <main>
    <p>
      En CanineConnect, estamos emocionados de ayudarte a encontrar el compa√±ero
      perfecto que traer√° alegr√≠a y amor a tu vida. Adoptar un perro no solo
      significa a√±adir un miembro a tu familia, sino tambi√©n darle a un perro
      una segunda oportunidad en la vida.
    </p>
    <p>
      Si eres una protectora o un refugio comprometido con el bienestar animal,
      ¬°nos encantar√≠a contar contigo!
    </p>
    <div class="dog-icon-header">
      <RouterLink
        class="router-link"
        :to="{ name: 'adoption-list' }"
        title="Ver perros disponibles para adopci√≥n"
      >
        <div class="content-icon-header">
          <img src="../../assets/icons/dog.webp" alt="Adoption" />
          <span>Ver perros en adopci√≥n</span>
        </div>
      </RouterLink>
    </div>
  </main>
  <section>
    <h3>¬øC√≥mo Funciona?</h3>
    <ol>
      <li v-for="guide in infoGuide" :key="guide.title">
        <h4>{{ guide.title }}</h4>
        <p>{{ guide.text }}</p>
      </li>
    </ol>
  </section>
  <section>
    <h3>¬øPor Qu√© Adoptar?</h3>
    <ol>
      <li v-for="why in whyAdopt" :key="why.title">
        <h4>{{ why.title }}</h4>
        <p>{{ why.text }}</p>
      </li>
    </ol>
  </section>
  <section>
    <h3>¬øListo para adoptar?</h3>
    <p>
      ¬°Descubre a los incre√≠bles perros que est√°n esperando por un hogar
      amoroso!
    </p>
    <div class="dog-icon-footer">
      <RouterLink
        class="router-link"
        :to="{ name: 'adoption-list' }"
        title="Ver perros disponibles para adopci√≥n"
      >
        <div class="content-icon-footer">
          <img src="../../assets/icons/dog.webp" alt="Adoption" />
          <span>Ver perros en adopci√≥n</span>
        </div>
      </RouterLink>
    </div>
  </section>
</template>
<style scoped>
h2 {
  text-align: center;
}
h2,
p {
  margin-bottom: 1rem;
}
span {
  display: block;
  text-align: center;
  color: var(--accent-200);
  font-weight: bold;
}
/* Estilo general del enlace */

.router-link {
  text-decoration: none;
}
.dog-icon-header {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
}

.content-icon-header {
  display: flex;
  flex-direction: column;
  flex-direction: column-reverse;
  align-items: center;
  
}
.content-icon-footer {
  display: flex;
  align-items: center;
  justify-content: center;
}
.content-icon-footer img{
  height: 4rem;
  padding: 0 1rem 0 0
}
</style>



--- File: views\Adoption\DogInformationView.vue ---

<script setup>
import { useRoute } from "vue-router";
import { useDocument, useFirestore } from "vuefire";
import Link from "@/components/Link.vue";
import { doc } from "firebase/firestore";

const route = useRoute();

const db = useFirestore();
const docRef = doc(db, "adoptions", route.params.id);
const dog = useDocument(docRef);
</script>

<template>
  <div class="information-container" v-if="dog">
    <div class="image-container">
      <img :src="dog.image" alt="Pet Image" class="pet-image" :alt="dog" />
    </div>
    <div class="information">
      <div class="basic-information">
        <h3 class="pet-name">{{ dog.dogName }}</h3>
        <p class="pet-status">{{ dog.adoptionStatus }}</p>
      </div>
      <div class="additional-information">
        <section class="section-data">
          <h3 class="section-title">Mis datos</h3>
          <div class="data-list">
            <p class="data-item">
              Entrada: <span>{{ dog.rescueDate }}</span>
            </p>
            <p class="data-item">
              Donde se encontr√≥: <span>{{ dog.rescueLocation }}</span>
            </p>
            <p class="data-item">
              Raza: <span>{{ dog.dogBreed }}</span>
            </p>
            <p class="data-item">
              Edad: <span>{{ dog.dogAge }}</span>
            </p>
            <p class="data-item">
              Sexo: <span>{{ dog.sex }}</span>
            </p>
            <p class="data-item">
              Tama√±o:<span> {{ dog.size }}</span>
            </p>
            <p class="data-item">
              Energ√≠a: <span>{{ dog.energy }}</span>
            </p>
          </div>
        </section>
        <section class="section-history">
          <h3 class="pet-title">{{ dog.title }}</h3>
          <h3 class="section-title">Historia</h3>
          <p class="history-description">{{ dog.dogStory }}</p>
        </section>
        <section class="section-medical-history">
          <div class="medical-history">
            <h3 class="medical-title">Historial Medico</h3>
            <p class="medical-description">{{ dog.medicalHistory }}</p>
          </div>
          <div class="current-status">
            <h3 class="status-title">Estado Actual</h3>
            <p class="status-description">{{ dog.currentStatus }}</p>
          </div>
        </section>
        <section class="section-description">
          <h3 class="section-title">Descripci√≥n</h3>
          <p class="description-text">{{ dog.description }}</p>
        </section>
        <section class="section-requirements">
          <h3 class="section-title">Requisitos</h3>
          <p class="requirements-text">{{ dog.requirements }}</p>
        </section>
      </div>
    </div>
  </div>
  <Link to="adoption-list" class="link"> Volver</Link>
</template>

<style scoped>
.information-container {
  display: grid;
  gap: 2rem;
}
@media (min-width: 640px) {
  .information-container {
    grid-template-columns: 1fr 2fr;
  }
}

.image-container {
  /* estilos para el contenedor de la imagen */
}
.pet-image {
  /* estilos para la imagen de la mascota */
}
.basic-information {
  /* estilos para la secci√≥n de informaci√≥n */
}
.pet-name {
  /* estilos para el nombre de la mascota */
}

.pet-status span {
  color: var(--accent-100);
  font-weight: bolder;
}
.pet-status,
.pet-title {
  font-weight: bold;
  color:var(--accent-100)
}
.additional-information {
  /* estilos para la informaci√≥n adicional */
}
.section-data,
.section-history,
.section-medical-history,
.section-description,
.section-requirements {
  /* estilos para las secciones */
}
.section-title {
  /* estilos para los t√≠tulos de las secciones */
}
.data-list {
  /* estilos para la lista de datos */
}
.data-item span {
  font-weight: bold;
}
.data-item,
.history-description,
.medical-title,
.medical-description,
.status-title,
.status-description,
.description-text,
.requirements-text {
  /* estilos para los √≠tems de datos, historia, historial m√©dico, estado actual, descripci√≥n y requisitos */
}
.link{
  display: grid;
  place-items: center;
}
</style>



--- File: views\Adoption\EditAdoptionDogVIew.vue ---

<!-- ReportFoundItemView OK -->
<script setup>
/* Importaciones de bibliotecas externas */
import { reactive, watch, ref, nextTick } from "vue";
import { useRouter, useRoute } from "vue-router";
import { useDocument, useFirestore } from "vuefire";
import { doc } from "firebase/firestore";

/* Importaciones de componentes locales */
import Link from "@/components/Link.vue";
import SpinnerDog from "@/components/SpinnerDog.vue";

/* Importaciones de stores */
import { useAuthStore } from "@/stores/authStore";
import { useAdoptionStore } from "@/stores/adoptionStore";

/* Importaciones de composables */
import useImage from "@/composables/useImage";
/* Importaciones de helpers */
import { limitCharacters } from "@/helpers";

// Usamos el composable para el manejo de im√°genes y extraemos las propiedades necesarias
const { url, onFileChange, isImageUploaded, spinner } =
  useImage("adoptions_dogs");

// Usamos el store de items y de auth
const adoptionStore = useAdoptionStore();
// Inicializamos hooks de Vue Router
const router = useRouter();
const route = useRoute();

const nameCanineProtector = ref([
  {
    label: "--Selecciona Protectora--",
    value: "",
    attrs: {
      disabled: true,
    },
  },
  { label: "Huellas Amigables", value: "Huellas Amigables" },
  { label: "Hogar de Colas Wagging", value: "Hogar de Colas Wagging" },
  { label: "Refugio Canino Amoroso", value: "Refugio Canino Amoroso" },
  { label: "Patitas Protegidas", value: "Patitas Protegidas" },
  { label: "Un Segundo Ladrido", value: "Un Segundo Ladrido" },
  { label: "Peludos con Futuro", value: "Peludos con Futuro" },
  { label: "Compa√±eros Caninos", value: "Compa√±eros Caninos" },
  {
    label: "Narices H√∫medas, Corazones Grandes",
    value: "Narices H√∫medas, Corazones Grandes",
  },
  { label: "Huellas de Esperanza", value: "Huellas de Esperanza" },
  {
    label: "Amor Canino Sin Condiciones",
    value: "Amor Canino Sin Condiciones",
  },
]);

const db = useFirestore();
const docRef = doc(db, "adoptions", route.params.id);
const dog = useDocument(docRef);

const isDataReady = ref("false");

watch(dog, async (dog) => {
  if (!dog) {
    await router.push({ name: "adoption-list" });
  } else {
    Object.assign(formData, dog);
    isDataReady.value = "true";
    await nextTick();
  }
});

// Definimos los datos del formulario de manera reactiva
const formData = reactive({
  refugeName: "",
  website: "",
  contactName: "",
  email: "",
  phone: "",
  dogName: "",
  adoptionStatus: "",
  rescueDate: "",
  rescueLocation: "",
  dogBreed: "",
  dogAge: "",
  weight: "",
  energy: "",
  sex: "",
  size: "",
  medicalHistory: "",
  currentStatus: "",
  description: "",
  requirements: "",
  dogStory: "",
  title: "",
  image: "",
});
// Funci√≥n para manejar el env√≠o del formulario
const handleSubmit = async (data) => {
  try {
    // Actualizamos el documento en Firestore con los nuevos datos y la URL de la imagen
    const updatedData = {
      ...data,
      url,
    };
    await adoptionStore.updateAdoptionDog(docRef, updatedData); // Actualizamos el documento en Firestore con los nuevos datos y la URL de la imagen
    router.push({ name: "adoption-list" }); // Redirigimos a la p√°gina de "lost-dogs" despu√©s de la actualizaci√≥n
  } catch (error) {
    console.log(error); // Manejamos cualquier error que ocurra durante la actualizaci√≥n
  }
};


// Funci√≥n para manejar la limitaci√≥n de caracteres
const handleLimitCharacters = (field, maxLength) => {
  limitCharacters(formData, field, maxLength);
};
</script>

<template>
  <Link to="adoption">Volver</Link>
  <header>
    <h2>Realiza los cambios necesaros</h2>
  </header>
  <main>
    <!-- Formulario -->
    <div class="form">
      <FormKit type="form" submit-label="Enviar" @submit="handleSubmit">
        <!-- Campos del formulario -->
        <h3>Informaci√≥n General</h3>
        <FormKit
          type="select"
          label="Selecciona tu protectora?"
          name="refugeName"
          validation="required"
          :validation-messages="{
            required: 'Seleccionar el nombre tu protectora es obligatorio',
          }"
          :options="nameCanineProtector"
          v-model="formData.refugeName"
        />
        <FormKit
          type="url"
          label="Tu website"
          name="website"
          placeholder="https://www.example.com..."
          validation="required|url"
          :validation-messages="{
            required: 'A√±ade la direcci√≥n de tu website',
            url: 'Introduce correctamente tu website',
          }"
          v-model.trim="formData.website"
        />
        <FormKit
          type="text"
          label="Nombre del Contacto"
          name="contactName"
          placeholder="Nombre del Contacto"
          validation="required"
          :validation-messages="{ required: 'El Contacto es Obligatorio' }"
          v-model.trim="formData.contactName"
        />
        <FormKit
          type="email"
          label="Email"
          name="email"
          placeholder="Email"
          validation="required"
          :validation-messages="{ required: 'El Email es Obligatorio' }"
          v-model.trim="formData.email"
        />
        <FormKit
          type="tel"
          label="Tel√©fono"
          name="phone"
          placeholder="N√∫mero de Tel√©fono"
          validation="required"
          :validation-messages="{ required: 'El Tel√©fono es Obligatorio' }"
          v-model.trim="formData.phone"
        />
        <h3>Informaci√≥n del Perro</h3>

        <FormKit
          type="text"
          label="Nombre del Perro"
          name="dogName"
          placeholder="Nombre del Perro"
          validation="required"
          :validation-messages="{ required: 'El Nombre es Obligatorio' }"
          v-model.trim="formData.dogName"
        />
        <!-- Secci√≥n de imagen y spinner -->
        <div v-if="spinner" class="spinner">
          <SpinnerDog />
        </div>
        <div v-else-if="isImageUploaded" class="image-container">
          <p class="image">Imagen Nueva:</p>
          <img :src="url" alt="Nueva imagen Producto" class="image" />
        </div>
        <div v-else class="image-container">
          <p class="image">Imagen Actual:</p>
          <img
            :src="formData.image"
            :alt="'Imagen de ' + formData.image"
            class="image"
          />
        </div>
        <!-- Campo para cambiar la imagen -->
        <FormKit
          type="file"
          label="Cambiar Imagen"
          name="image"
          multiple="false"
          accept=".jpg,.webp, jpeg"
          @change="onFileChange"
        />
        <FormKit
          type="select"
          label="¬øCual es el estado de adopci√≥n?"
          name="adoptionStatus"
          :options="[
            {
              label: '--Selecciona el estado--',
              value: '',
              attrs: { disabled: true },
            },
            'En adopci√≥n',
            'Adopciones  dobles',
            'En acogida',
            'Casos especiales',
            'Adoptados',
          ]"
          validation="required"
          :validation-messages="{ required: 'El estado es      Obligatorio' }"
          v-model.trim="formData.adoptionStatus"
        />
        <FormKit
          type="date"
          label="Fecha de Rescate"
          name="rescueDate"
          placeholder="Fecha de Rescate"
          validation="required"
          :validation-messages="{ required: 'La Fecha es Obligatoria' }"
          v-model.trim="formData.rescueDate"
        />
        <FormKit
          type="text"
          label="Ubicaci√≥n del Rescate"
          name="rescueLocation"
          placeholder="Ubicaci√≥n del Rescate"
          validation="required"
          :validation-messages="{ required: 'La Ubicaci√≥n es Obligatoria' }"
          v-model.trim="formData.rescueLocation"
        />
        <FormKit
          type="text"
          label="Raza"
          name="dogBreed"
          placeholder="Raza"
          validation="required"
          :validation-messages="{ required: 'La Raza es Obligatoria' }"
          v-model.trim="formData.dogBreed"
        />
        <FormKit
          type="number"
          label="Edad"
          name="dogAge"
          placeholder="Edad"
          validation="required"
          :validation-messages="{ required: 'La Edad es Obligatoria' }"
          v-model.number="formData.dogAge"
          min="1"
        />
        <FormKit
          type="radio"
          label="Sexo del Perro"
          name="sex"
          :options="['Macho', 'Hembra']"
          validation="required"
          :validation-messages="{ required: 'Seleccionar Sexo es Obligatorio' }"
          v-model="formData.sex"
        />
        <FormKit
          type="radio"
          label="Tama√±o del perro"
          name="size"
          :options="[
            'Peque√±o, hasta 35 cm',
            'Mediano, entre 35 y 55 cm',
            'Grande,  entre 55 y 75 cm',
            'Gigante,  m√°s de 75 cm',
          ]"
          validation="required"
          :validation-messages="{
            required: 'Seleccionar tama√±o es Obligatorio',
          }"
          v-model="formData.size"
        />
        <FormKit
          type="radio"
          label="Peso del perro"
          name="weight"
          :options="[
            'Hasta 10 kg',
            'Entre 10 y 25 kg',
            ' 25 y 45 kg',
            'M√°s de 75 cm',
          ]"
          validation="required"
          :validation-messages="{
            required: 'Seleccionar el peso es Obligatorio',
          }"
          v-model="formData.weight"
        />
        <FormKit
          type="range"
          :label="`Indique el nivel de actividad del perro: ${
            formData.energy || 50
          } `"
          number
          step="10"
          name="energy"
          min="0"
          max="100"
          v-model="formData.energy"
          help="Indique el nivel de actividad t√≠pico del perro (bajo, medio o alto)"
        />

        <FormKit
          type="textarea"
          label="Historial M√©dico"
          name="medicalHistory"
          placeholder="Historial M√©dico"
          :help="`${formData.medicalHistory.length} / 300`"
          validation="length:0,300"
          :validation-messages="{
            length: 'La Descripci√≥n no puede tener m√°s de 300 caracteres',
          }"
          validation-visibility="blur"
          v-model.trim="formData.medicalHistory"
          @input="handleLimitCharacters('medicalHistory', 300)"
        />
        <FormKit
          type="textarea"
          label="Estado Actual"
          name="currentStatus"
          placeholder="Estado Actual"
          :help="`${formData.currentStatus.length} / 300`"
          validation="length:0,300"
          :validation-messages="{
            length: 'La Descripci√≥n no puede tener m√°s de 300 caracteres',
          }"
          validation-visibility="blur"
          v-model.trim="formData.currentStatus"
          @input="handleLimitCharacters('currentStatus', 300)"
        />
        <FormKit
          type="textarea"
          label="Descripci√≥n"
          name="description"
          placeholder="Una descripci√≥n detallada de la personalidad, el temperamento y las necesidades especiales del perro."
          :help="`${formData.description.length} / 600`"
          validation="length:0,600"
          :validation-messages="{
            length: 'La Descripci√≥n no puede tener m√°s de 600 caracteres',
          }"
          validation-visibility="blur"
          v-model.trim="formData.description"
          @input="handleLimitCharacters('currentStatus', 600)"
        />
        <FormKit
          type="textarea"
          label="Requisitos"
          name="requirements"
          placeholder="Describa cualquier requisito espec√≠fico para adoptar al perro (por ejemplo, patio cercado, experiencia con ciertas razas)."
          :help="`${formData.requirements.length} / 600`"
          validation="length:0,600"
          :validation-messages="{
            length: 'La Descripci√≥n no puede tener m√°s de 600 caracteres',
          }"
          validation-visibility="blur"
          v-model.number="formData.requirements"
          @input="handleLimitCharacters('currentStatus', 600)"
        />
        <FormKit
          type="textarea"
          label="Historia"
          name="dogStory"
          placeholder="Cu√©ntanos la historia,¬øC√≥mo lleg√≥  a tu refugio/protectora? ¬øQu√© experiencias ha tenido en el pasado?¬øQu√© puede ofrecer a una familia? ¬øQu√© tipo de amor y lealtad puede dar? "
          :help="`${formData.dogStory.length} / 900`"
          validation="length:0,900"
          :validation-messages="{
            length: 'La historia no puede tener m√°s de 900 caracteres',
          }"
          validation-visibility="blur"
          v-model.trim="formData.dogStory"
          @input="handleLimitCharacters('currentStatus', 900)"
        />
        <FormKit
          type="text"
          label="Titulo"
          name="title"
          placeholder="Ejemplos:
      'Sociable y cari√±oso','Todo energ√≠a'"
          validation="required | length:0,030"
          :validation-messages="{
            required: 'El t√≠tulo es Obligatorio',
            length: 'El titulo no puede tener mas de 30 caracteres ',
          }"
          v-model.trim="formData.title"
          :help="`${formData.dogStory.length} / 30 `"
        />
        <FormKit
          type="checkbox"
          label="Permiso de Uso de Imagen"
          name="terms"
          :value="true"
          validation="accepted"
          validation-visibility="dirty"
          :validation-messages="{ required: 'Acepta Uso de Imagen' }"
          v-model="formData.terms"
        />
      </FormKit>
    </div>
  </main>
</template>
<style scoped>
img {
  height: 20px;
  width: 20px;
}
h1,
h2,
h3,
span {
  text-align: center;
}

h2 {
  margin-bottom: 1rem;
}

/* Estilo del formulario */
.form {
  display: flex;
  justify-content: center;
  /* Centrar horizontalmente */
  align-items: center;
  /* Centrar verticalmente */
  min-height: 50vh;
  /* Altura m√≠nima para centrar verticalmente */
}

.form > * {
  max-width: 40rem;
  /* Ancho m√°ximo del formulario */
  width: 100%;
  /* Hace que el formulario ocupe todo el ancho disponible */
  margin: 0 auto;
  margin-bottom: 1rem;
  /* Espaciado entre elementos del formulario */
}

/* Contenedor para la imagen */
.image-container {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
}

/* Estilo de la imagen */
.image {
  width: 20rem;
  height: 20rem;
}
</style>



--- File: views\Adoption\ListDogsAdoption.vue ---

<script setup>
import { ref, computed } from "vue";
import Link from "@/components/Link.vue";

import AdoptionCardView from "./AdoptionCardView.vue";

import { useAdoptionStore } from "@/stores/adoptionStore";

const adoptionStore = useAdoptionStore();

const selectedGender = ref("indifferent");
const selectedCategory = ref("inAdoptionProcess");

const sexSelect = (e) => {
  selectedGender.value = e.target.value;
};

const categorySelect = (e) => {
  selectedCategory.value = e.target.value;
};

const filteredAdoptions = computed(() => {
  // Filtrar por g√©nero
  const genderFiltered =
    selectedGender.value === "indifferent"
      ? adoptionStore.adoptionsCollection
      : adoptionStore.adoptionsCollection.filter(
          (adoption) => adoption.sex === selectedGender.value
        );

  // Filtrar por categor√≠a
  const categoryFiltered = genderFiltered.filter(
    (adoption) => adoption.adoptionStatus === selectedCategory.value
  );

  return categoryFiltered;
});
</script>

<template>
  <div class="adoption-container">
    <div class="section">
      <section class="categories-container">
        <h2>Selecciona categor√≠a</h2>
        <div class="categories">
          <div>
            <label>
              <input
                type="radio"
                name="category"
                value="inAdoptionProcess"
                @change="categorySelect"
                checked
              />
              En adopci√≥n
            </label>
          </div>
          <div>
            <label>
              <input
                type="radio"
                name="category"
                value="doubleAdoption"
                @change="categorySelect"
              />
              Adopciones dobles
            </label>
          </div>
          <div>
            <label>
              <input
                type="radio"
                name="category"
                value="inFosterCare"
                @change="categorySelect"
              />
              En acogida
            </label>
          </div>
          <div>
            <label>
              <input
                type="radio"
                name="category"
                value="specialCases"
                @change="categorySelect"
              />
              Casos especiales
            </label>
          </div>
          <div>
            <label>
              <input
                type="radio"
                name="category"
                value="adopted"
                @change="categorySelect"
              />
              Adoptados
            </label>
          </div>
        </div>
      </section>
      <section class="gender-container">
        <h2>Selecciona sexo</h2>
        <div class="gender">
          <div>
            <label>
              <input
                type="radio"
                name="gender"
                value="indifferent"
                @change="sexSelect"
                checked
              />
              Indiferente
            </label>
          </div>
          <div>
            <label>
              <input
                type="radio"
                name="gender"
                value="male"
                @change="sexSelect"
              />
              Masculino
            </label>
          </div>
          <div>
            <label>
              <input
                type="radio"
                name="gender"
                value="female"
                @change="sexSelect"
              />
              Femenino
            </label>
          </div>
        </div>
      </section>
      <div>
        <Link to="adoption">Volver </Link>
      </div>
    </div>
    <div class="adoptionCardView">
      <AdoptionCardView
        v-for="adoption in filteredAdoptions"
        :key="adoption.id"
        :adoption="adoption"
      />
    </div>
  </div>
</template>

<style scoped>
.section {
  display: flex;
  flex-direction: column;
  margin: 0 2rem 2rem 0;
}
.adoptionCardView {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 1rem;
}
@media (min-width: 640px) {
  .adoption-container {
    display: flex;
  }
}

.categories {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}
.noData {
  display: flex;
  flex-direction: column;
}
@media (min-width: 640px) {
  .noData {
    display: flex;
    flex-direction: row;
    gap: 1rem;
  }
}
.noData h4 {
  display: block;
  text-align: center;
}
.noData p {
  display: block;
  text-align: center;
  color: rgb(160, 25, 25);
  font-weight: bold;
}
</style>



--- File: views\Adoption\ReportAdoptionView.vue ---

<!-- ReportFoundItemView OK -->
<script setup>
/* Importaciones de bibliotecas externas */
import { reactive, watch, ref } from "vue";
import { useRouter } from "vue-router";

/* Importaciones de componentes locales */
import Link from "@/components/Link.vue";
import SpinnerDog from "@/components/SpinnerDog.vue";

/* Importaciones de stores */
import { useAuthStore } from "@/stores/authStore";
import { useAdoptionStore } from "@/stores/adoptionStore";

/* Importaciones de composables */
import useImage from "@/composables/useImage";
/* Importaciones de helpers */
import { limitCharacters } from "@/helpers";

// Usamos el composable para el manejo de im√°genes y extraemos las propiedades necesarias
const { url, onFileChange, isImageUploaded, spinner } =
  useImage("adoptions_dogs");

// Usamos el store de items y de auth
const authStore = useAuthStore();
const adoptionStore = useAdoptionStore();
// Inicializamos hooks de Vue Router
const router = useRouter();

const nameCanineProtector = ref([
  {
    label: "--Selecciona Protectora--",
    value: "",
    attrs: {
      disabled: true,
    },
  },
  { label: "Huellas Amigables", value: "Huellas Amigables" },
  { label: "Hogar de Colas Wagging", value: "Hogar de Colas Wagging" },
  { label: "Refugio Canino Amoroso", value: "Refugio Canino Amoroso" },
  { label: "Patitas Protegidas", value: "Patitas Protegidas" },
  { label: "Un Segundo Ladrido", value: "Un Segundo Ladrido" },
  { label: "Peludos con Futuro", value: "Peludos con Futuro" },
  { label: "Compa√±eros Caninos", value: "Compa√±eros Caninos" },
  {
    label: "Narices H√∫medas, Corazones Grandes",
    value: "Narices H√∫medas, Corazones Grandes",
  },
  { label: "Huellas de Esperanza", value: "Huellas de Esperanza" },
  {
    label: "Amor Canino Sin Condiciones",
    value: "Amor Canino Sin Condiciones",
  },
]);

// Definimos los datos del formulario de manera reactiva
const formData = reactive({
  refugeName: "",
  website: "",
  contactName: "",
  email: "",
  phone: "",
  dogName: "",
  adoptionStatus: "",
  rescueDate: "",
  rescueLocation: "",
  dogBreed: "",
  dogAge: "",
  weight: "",
  energy: "",
  sex: "",
  size: "",
  medicalHistory: "",
  currentStatus: "",
  description: "",
  requirements: "",
  dogStory: "",
  title: "",
  image: "",
});

// Funci√≥n para manejar el env√≠o del formulario
const handleSubmit = async (data) => {
  const { image, ...values } = data;
  try {
    // Creamos un nuevo item usando el store
    await adoptionStore.createAdoption({
      ...values,
      userId: authStore.userData.uid, // Incorporamos userId con el UID del usuario autenticado
      image: url.value, // Usamos la URL de la imagen subida
    });
    // Redirigimos a la p√°gina de "lost-items" despu√©s de la creaci√≥n
    router.push({ name: "adoption-list" });
  } catch (error) {
    console.log(error); // Manejamos cualquier error que ocurra durante la creaci√≥n
  }
};

// Funci√≥n para manejar la limitaci√≥n de caracteres
const handleLimitCharacters = (field, maxLength) => {
  limitCharacters(formData, field, maxLength);
};
</script>

<template>
  <Link to="adoption">Volver</Link>
  <header>
    <h1>¬°Bienvenidos a CaniniConnect!</h1>
  </header>

  <main>
    <p>
      En CaniniConnect, nuestra misi√≥n es encontrar hogares amorosos para cada
      perro que lo necesite. Nos enorgullece colaborar con protectoras y
      refugios para hacer realidad este sue√±o.
    </p>
  </main>
  <section>
    <h2>¬øC√≥mo funciona?</h2>
    <article>
      <h3>Publica Perfiles de Perros:</h3>
      <p>
        Explora nuestra aplicaci√≥n hoy y descubre c√≥mo puedes cambiar una vida y
        la tuya. Si tienes alguna pregunta o necesitas ayuda, nuestro equipo
        est√° disponible para asistirte. <br />
      </p>
    </article>
    <article>
      <h3>Conecta con Adoptantes:</h3>
      <p>
        Recibe solicitudes de adopci√≥n y gestiona las consultas directamente a
        trav√©s de nuestra plataforma.
      </p>
    </article>
    <article>
      <h3>Hacemos el Resto:</h3>
      <p>
        Nosotros nos encargamos de difundir los perfiles y ayudar a encontrar la
        mejor familia para cada uno de tus perros.
      </p>
    </article>
  </section>
  <section>
    <h2>¬øPor qu√© elegir CaniniConnect?</h2>
    <article>
      <h3>Visibilidad Ampliada:</h3>
      <p>
        Nuestra aplicaci√≥n llega a una amplia audiencia de posibles adoptantes
        comprometidos.
      </p>
    </article>
    <article>
      <h3>Facilidad de Uso:</h3>
      <p>
        Herramientas intuitivas para gestionar perfiles, solicitudes y
        comunicaciones.
      </p>
    </article>
    <article>
      <h3>Soporte Continuo:</h3>
      <p>
        Nuestro equipo est√° aqu√≠ para ayudarte en cada paso del proceso.
        <br />
        <span>¬°√önete a nosotros y marca la diferencia! </span>
      </p>
    </article>
  </section>

  <!-- Formulario -->
  <div class="form">
    <FormKit type="form" submit-label="Enviar" @submit="handleSubmit">
      <h2>Rellena Formulario</h2>
      <!-- Campos del formulario -->
      <h3>Informaci√≥n General</h3>
      <FormKit
        type="select"
        label="Selecciona tu protectora?"
        name="refugeName"
        validation="required"
        :validation-messages="{
          required: 'Seleccionar el nombre tu protectora es obligatorio',
        }"
        :options="nameCanineProtector"
        v-model="formData.refugeName"
      />
      <FormKit
        type="url"
        label="Tu website"
        name="website"
        placeholder="https://www.example.com..."
        validation="required|url"
        :validation-messages="{
          required: 'A√±ade la direcci√≥n de tu website',
          url: 'Introduce correctamente tu website',
        }"
        v-model.trim="formData.website"
      />
      <FormKit
        type="text"
        label="Nombre del Contacto"
        name="contactName"
        placeholder="Nombre del Contacto"
        validation="required"
        :validation-messages="{ required: 'El Contacto es Obligatorio' }"
        v-model.trim="formData.contactName"
      />
      <FormKit
        type="email"
        label="Email"
        name="email"
        placeholder="Email"
        validation="required"
        :validation-messages="{ required: 'El Email es Obligatorio' }"
        v-model.trim="formData.email"
      />
      <FormKit
        type="tel"
        label="Tel√©fono"
        name="phone"
        placeholder="N√∫mero de Tel√©fono"
        validation="required"
        :validation-messages="{ required: 'El Tel√©fono es Obligatorio' }"
        v-model.trim="formData.phone"
      />
      <h3>Informaci√≥n del Perro</h3>

      <FormKit
        type="text"
        label="Nombre del Perro"
        name="dogName"
        placeholder="Nombre del Perro"
        validation="required"
        :validation-messages="{ required: 'El Nombre es Obligatorio' }"
        v-model.trim="formData.dogName"
      />
      <!-- Imagen -->
      <FormKit
        type="file"
        label="A√±ade una imagen del objeto y espera a que se cargue"
        name="image"
        placeholder="Imagen"
        validation="required"
        :validation-messages="{
          required: 'La imagen es obligatoria',
        }"
        @change="onFileChange"
        v-model.trim="formData.image"
      />
      <!-- Spinner y previsualizaci√≥n de la imagen -->
      <div v-if="spinner" class="spinner">
        <SpinnerDog />
      </div>
      <div v-else-if="isImageUploaded" class="image-container">
        <img :src="url" alt="Nueva imagen producto" class="image" />
      </div>
      <FormKit
        type="select"
        label="¬øCual es el estado de adopci√≥n?"
        name="adoptionStatus"
        :options="[
          {
            label: '--Selecciona el estado--',
            value: '',
            attrs: { disabled: true },
          },
          {
            label: 'En adopci√≥n',
            value: 'inAdoptionProcess',
            attrs: { disabled: false },
          },
          {
            label: 'Adopciones  dobles',
            value: 'doubleAdoption',
            attrs: { disabled: false },
          },
          {
            label: 'En acogida',
            value: 'inFosterCare',
            attrs: { disabled: false },
          },
          {
            label: 'Casos especiales',
            value: 'specialCases',
            attrs: { disabled: false },
          },
          {
            label: 'Adoptados',
            value: 'adopted',
            attrs: { disabled: false },
          },
        ]"
        validation="required"
        :validation-messages="{ required: 'El estado es      Obligatorio' }"
        v-model.trim="formData.adoptionStatus"
      />
      <FormKit
        type="date"
        label="Fecha de Rescate"
        name="rescueDate"
        placeholder="Fecha de Rescate"
        validation="required"
        :validation-messages="{ required: 'La Fecha es Obligatoria' }"
        v-model.trim="formData.rescueDate"
      />
      <FormKit
        type="text"
        label="Ubicaci√≥n del Rescate"
        name="rescueLocation"
        placeholder="Ubicaci√≥n del Rescate"
        validation="required"
        :validation-messages="{ required: 'La Ubicaci√≥n es Obligatoria' }"
        v-model.trim="formData.rescueLocation"
      />
      <FormKit
        type="text"
        label="Raza"
        name="dogBreed"
        placeholder="Raza"
        validation="required"
        :validation-messages="{ required: 'La Raza es Obligatoria' }"
        v-model.trim="formData.dogBreed"
      />
      <FormKit
        type="number"
        label="Edad"
        name="dogAge"
        placeholder="Edad"
        validation="required"
        :validation-messages="{ required: 'La Edad es Obligatoria' }"
        v-model.number="formData.dogAge"
        min="1"
      />
      <FormKit
        type="radio"
        label="Sexo del Perro"
        name="sex"
        :options="[
          { label: 'Macho', value: 'male' },
          { label: 'Hembra', value: 'female' },
        ]"
        validation="required"
        :validation-messages="{ required: 'Seleccionar Sexo es Obligatorio' }"
        v-model="formData.sex"
      />
      <FormKit
        type="radio"
        label="Tama√±o del perro"
        name="size"
        :options="[
          'Peque√±o, hasta 35 cm',
          'Mediano, entre 35 y 55 cm',
          'Grande,  entre 55 y 75 cm',
          'Gigante,  m√°s de 75 cm',
        ]"
        validation="required"
        :validation-messages="{ required: 'Seleccionar tama√±o es Obligatorio' }"
        v-model="formData.size"
      />
      <FormKit
        type="radio"
        label="Peso del perro"
        name="weight"
        :options="[
          'Hasta 10 kg',
          'Entre 10 y 25 kg',
          ' 25 y 45 kg',
          'M√°s de 75 cm',
        ]"
        validation="required"
        :validation-messages="{
          required: 'Seleccionar el peso es Obligatorio',
        }"
        v-model="formData.weight"
      />
      <FormKit
        type="range"
        :label="`Indique el nivel de actividad del perro: ${
          formData.energy || 50
        } `"
        number
        step="10"
        name="energy"
        min="0"
        max="100"
        v-model="formData.energy"
        help="Indique el nivel de actividad t√≠pico del perro (bajo, medio o alto)"
      />

      <FormKit
        type="textarea"
        label="Historial M√©dico"
        name="medicalHistory"
        placeholder="Historial M√©dico"
        :help="`${formData.medicalHistory.length} / 300`"
        validation="length:0,300"
        :validation-messages="{
          length: 'La Descripci√≥n no puede tener m√°s de 300 caracteres',
        }"
        validation-visibility="blur"
        v-model.trim="formData.medicalHistory"
        @input="handleLimitCharacters('medicalHistory', 300)"
      />
      <FormKit
        type="textarea"
        label="Estado Actual"
        name="currentStatus"
        placeholder="Estado Actual"
        :help="`${formData.currentStatus.length} / 300`"
        validation="length:0,300"
        :validation-messages="{
          length: 'La Descripci√≥n no puede tener m√°s de 300 caracteres',
        }"
        validation-visibility="blur"
        v-model.trim="formData.currentStatus"
        @input="handleLimitCharacters('currentStatus', 300)"
      />
      <FormKit
        type="textarea"
        label="Descripci√≥n"
        name="description"
        placeholder="Una descripci√≥n detallada de la personalidad, el temperamento y las necesidades especiales del perro."
        :help="`${formData.description.length} / 600`"
        validation="length:0,600"
        :validation-messages="{
          length: 'La Descripci√≥n no puede tener m√°s de 600 caracteres',
        }"
        validation-visibility="blur"
        v-model.trim="formData.description"
        @input="handleLimitCharacters('currentStatus', 600)"
      />
      <FormKit
        type="textarea"
        label="Requisitos"
        name="requirements"
        placeholder="Describa cualquier requisito espec√≠fico para adoptar al perro (por ejemplo, patio cercado, experiencia con ciertas razas)."
        :help="`${formData.requirements.length} / 600`"
        validation="length:0,600"
        :validation-messages="{
          length: 'La Descripci√≥n no puede tener m√°s de 600 caracteres',
        }"
        validation-visibility="blur"
        v-model.number="formData.requirements"
        @input="handleLimitCharacters('currentStatus', 600)"
      />
      <FormKit
        type="textarea"
        label="Historia"
        name="dogStory"
        placeholder="Cu√©ntanos la historia,¬øC√≥mo lleg√≥  a tu refugio/protectora? ¬øQu√© experiencias ha tenido en el pasado?¬øQu√© puede ofrecer a una familia? ¬øQu√© tipo de amor y lealtad puede dar? "
        :help="`${formData.dogStory.length} / 900`"
        validation="length:0,900"
        :validation-messages="{
          length: 'La historia no puede tener m√°s de 900 caracteres',
        }"
        validation-visibility="blur"
        v-model.trim="formData.dogStory"
        @input="handleLimitCharacters('currentStatus', 900)"
      />
      <FormKit
        type="text"
        label="Titulo"
        name="title"
        placeholder="Ejemplos:
      'Sociable y cari√±oso','Todo energ√≠a'"
        validation="required | length:0,030"
        :validation-messages="{
          required: 'El t√≠tulo es Obligatorio',
          length: 'El titulo no puede tener mas de 30 caracteres ',
        }"
        v-model.trim="formData.title"
        :help="`${formData.dogStory.length} / 30 `"
      />
      <FormKit
        type="checkbox"
        label="Permiso de Uso de Imagen"
        name="terms"
        :value="true"
        validation="accepted"
        validation-visibility="dirty"
        :validation-messages="{ required: 'Acepta Uso de Imagen' }"
        v-model="formData.terms"
      />
    </FormKit>
  </div>
</template>
<style scoped>
h1 {
  text-align: center;
}

h2,
p {
  margin-bottom: 1rem;
}

span {
  display: block;
  text-align: center;
  color: var(--accent-100);
  font-weight: bold;
}

/* Estilo del formulario */
.form {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 50vh;
}

.form > * {
  max-width: 40rem;
  width: 100%;
  margin: 0 auto;
  margin-bottom: 1rem;
}
.form h2 {
  text-align: center;
}
.form h3 {
  text-align: center margin;
}

/* Contenedor para la imagen */
.image-container {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  margin-bottom: 1rem;
}

/* Estilo de la imagen */
.image {
  max-width: 20rem;
  /* Ajusta el ancho de la imagen */
  height: auto;
  /* Mantiene la proporci√≥n de la imagen */
  max-height: 20rem;
  /* Limita la altura m√°xima de la imagen */
}
</style>



--- File: views\BlogView.vue ---

<script setup>
import UnderConstructionPage from '@/components/UnderConstructionPage.vue';


</script>

<template>
    <UnderConstructionPage/>
</template>
<style scoped>

</style>



--- File: views\Chat\Chat.vue ---

<script setup>
import ChatMessagesView from './ChatMessagesView.vue';

const chatRules = [
  {
    title: "Respeto Mutuo:",
    description:
      " Mant√©n siempre un tono respetuoso y amigable con todos los participantes. No se tolerar√°n insultos, descalificaciones ni lenguaje ofensivo.",
  },
  {
    title: "No Spam:",
    description:
      " Evita enviar mensajes repetitivos, publicidad no solicitada o enlaces que no aporten valor a la conversaci√≥n.",
  },
  {
    title: "Privacidad:",
    description:
      " No compartas informaci√≥n personal tuya ni de otros usuarios. Respeta la privacidad de los dem√°s.",
  },
  {
    title: "Contenido Apropiado:",
    description:
      " No publiques contenido que sea inapropiado, ilegal o que infrinja derechos de autor. Esto incluye im√°genes, videos y enlaces.",
  },
  {
    title: "Feedback Constructivo:",
    description:
      " Si tienes cr√≠ticas o sugerencias, expr√©salas de manera constructiva y con el objetivo de mejorar la experiencia de todos.",
  },
  {
    title: "Moderaci√≥n:",
    description:
      " Los moderadores tienen la √∫ltima palabra en la interpretaci√≥n y aplicaci√≥n de estas normas. Sigue sus indicaciones y respeta sus decisiones.",
  },
];
</script>

<template>
  <div class="chat-container">
    <!-- Secci√≥n de Normas del Chat -->
    <div class="chat-rules-container">
      <h2 class="chat-rules-title">Normas del Chat</h2>
      <ol class="chat-rules-list">
        <li
          v-for="(chatRule, index) in chatRules"
          :key="index"
          class="chat-rule-item"
        >
          <span class="chat-rule-title">{{ chatRule.title }}</span>
          <span class="chat-rule-description"> {{ chatRule.description }}</span>
        </li>
      </ol>
    </div>
    <!-- Secci√≥n de Mensajes del Chat -->
    <div class="chat-messages-container">
      <ChatMessagesView />
    </div>
  </div>
</template>

<style scoped>
/* Contenedor principal del chat */
.chat-container {
  padding: 1rem;
}

/* Contenedor de las normas del chat */
.chat-rules-container {
  margin-bottom: 1rem;
}

/* T√≠tulo de las normas del chat */
.chat-rules-title {
  text-align: center;
  margin-bottom: 1rem;
  font-size: 2rem;
  font-weight: bold;
}

/* Lista de normas del chat */
.chat-rules-list {
  list-style-type: decimal;
  padding-left: 1.5rem;
}

/* Elemento individual de las normas del chat */
.chat-rule-item {
  margin-bottom: 1rem;
}

/* T√≠tulo de cada norma del chat */
.chat-rule-title {
  font-weight: 700;
  display: block;
  margin-bottom: 0.5rem;
}

/* Contenedor de los mensajes del chat */
.chat-messages-container {
  margin-top: 1rem;
}
</style>



--- File: views\Chat\ChatMessagesView.vue ---

// ChatMessagesView OK
<script setup>
// Importamos las funciones y referencias necesarias desde Vue
import { ref, inject, computed } from "vue";
// Importamos los stores para el manejo del chat y la autenticaci√≥n
import { useChatStore } from "@/stores/chatStore";
import { useAuthStore } from "@/stores/authStore";

// Inicializamos el store del chat y de autenticaci√≥n
const messagesStore = useChatStore();
const authStore = useAuthStore();

// Creamos una referencia para el nuevo mensaje
const newMessage = ref("");
// Definimos la longitud m√°xima del mensaje
const maxLength = 300;
// Creamos una referencia para manejar el estado de env√≠o del mensaje
const isSending = ref(false);
// Inyectamos el servicio de notificaci√≥n (toast)
const toast = inject("toast");

// Computed property para comprobar si el mensaje supera la longitud m√°xima
const isOverLimit = computed(() => newMessage.value.length > maxLength);

// Computed property para determinar si el bot√≥n de enviar debe estar deshabilitado
const isDisabled = computed(
  () => isSending.value || newMessage.value.trim() === "" || isOverLimit.value
);

// Funci√≥n para manejar el env√≠o del mensaje
const handleSubmit = async () => {
  try {
    // Si el mensaje no est√° vac√≠o y no supera el l√≠mite de caracteres
    if (newMessage.value.trim() && !isOverLimit.value) {
      // Marcamos el estado como enviando
      isSending.value = true;
      // Enviamos el mensaje usando el store del chat
      await messagesStore.sendMessage(
        newMessage.value,
        authStore.userData.displayName,
        authStore.userData.uid
      );

      // Limpiamos el campo de nuevo mensaje despu√©s de enviarlo
      newMessage.value = "";
    } else if (isOverLimit.value) {
      // Si el mensaje supera el l√≠mite de caracteres, mostramos una notificaci√≥n de error
      toast.open({
        message: `El mensaje supera el m√°ximo de ${maxLength} caracteres.`,
        type: "error",
      });
    } else {
      // Si el mensaje est√° vac√≠o, mostramos una notificaci√≥n de error
      toast.open({
        message: "El mensaje est√° vac√≠o",
        type: "error",
      });
    }
  } catch (error) {
    // Si ocurre un error durante el env√≠o, lo mostramos en la consola
    console.error("Error enviando mensaje: ", error);
  } finally {
    // Restauramos el estado de env√≠o
    isSending.value = false;
  }
};
</script>

<template>
  <section class="chat-container">
    <section class="messages-section">
      <h3>Mensajes:</h3>
      <ul class="messages-list">
        <article
          v-for="(message, index) in messagesStore.messagesCollection"
          class="message-item"
          :class="{
            'bg-100': index % 2 === 0,
            'bg-300': index % 2 !== 0,
          }"
          :key="message.id"
        >
          <div class="message-datails">
            <span class="message-author">{{ message.displayName }}: </span>
            {{ message.text }} -
            <span class="message-timestamp">{{
              new Date(message.timestamp.seconds * 1000).toLocaleString()
            }}</span>
          </div>
          <div v-if="message.uid === authStore.userData.uid">
            <button
              type="button"
              @click="messagesStore.deleteMessage(message.id)"
              aria-label="Eliminar mensaje"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="icon icon-tabler icon-tabler-trash"
                width="28"
                height="28"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="#ff2825"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M4 7l16 0" />
                <path d="M10 11l0 6" />
                <path d="M14 11l0 6" />
                <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" />
                <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" />
              </svg>
            </button>
          </div>
        </article>
      </ul>
      <p class="no-messages" v-if="messagesStore.noResults">No hay mensajes</p>
    </section>
    <div class="user-info">
      <span>Nombre de usuario: </span>{{ authStore.userData.displayName }}
    </div>
    <form class="message-form" @submit.prevent="handleSubmit">
      <textarea
        class="message-input"
        :class="{ 'over-limit': isOverLimit }"
        v-model="newMessage"
        placeholder="Escribe tu mensaje..."
        :disabled="isSending"
        rows="3"
        cols="50"
      ></textarea>
      <div class="message-length">
        {{ newMessage.length }} / {{ maxLength }}
      </div>
      <button class="send-button" type="submit" :disabled="isDisabled">
        Enviar
      </button>
    </form>
  </section>
</template>

<style>
.chat-container {
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.user-info {
  margin-bottom: 10px;
  font-size: 16px;
  font-weight: bold;
}

.message-form {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 20px;
}

.message-input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  resize: none;
}

.message-input:disabled {
  background-color: #e9ecef;
  cursor: not-allowed;
}

.message-input.over-limit {
  border-color: red;
  color: red;
}

.message-length {
  align-self: flex-end;
  font-size: 12px;
  color: #666;
}

.send-button {
  align-self: flex-end;
  padding: 10px 20px;
  background-color: var(--accent-200);
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.send-button:disabled {
  background-color: #6c757d;
  cursor: not-allowed;
}

.send-button:hover:not(:disabled) {
  background-color:var(--accent-100);
}

.messages-section {
  margin-top: 20px;
}

.messages-list {
  list-style: none;
  padding: 0;
}

.message-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  border-radius: 8px;
  border: 1px solid #b2ebf2;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 10px;
}
.message-datails {
  color: var(--bg-0);
}
.bg-100 {
  background-color: var(--bg-100);
  border: none;
}

.bg-300 {
  background-color: var(--bg-300);
  border: none;
}

.message-author {
  font-weight: bold;
  color: var(--accent-100);
}

.message-timestamp {
  font-size: 12px;
  color: var(--accent-200);
}

.no-messages {
  text-align: center;
  color: #666;
}

button {
  border: none;
  background: none;
  cursor: pointer;
}
</style>



--- File: views\DonationView.vue ---

<script setup>
import UnderConstructionPage from '@/components/UnderConstructionPage.vue';


</script>

<template>
    <UnderConstructionPage/>
</template>
<style scoped>

</style>



--- File: views\ErrorNotFound.vue ---

<template>
  <div class="error-not-found">
    <h1>404 - P√°gina no encontrada</h1>
    <p>Lo sentimos, la p√°gina que est√°s buscando no se encuentra.</p>
    <!-- Puedes personalizar este mensaje con instrucciones espec√≠ficas -->
    <router-link :to="{ name: 'home' }"
      >Volver a la p√°gina de inicio</router-link
    >
  </div>
</template>

<style scoped>
.error-not-found {
  text-align: center;
  margin-top: 50px;
}
.error-not-found h1 {
  font-size: 36px;
  color: #ff0000;
}
.error-not-found p {
  font-size: 18px;
}
.error-not-found router-link {
  color: #007bff;
  text-decoration: underline;
  cursor: pointer;
}
</style>



--- File: views\Home\AboutSectionView.vue ---

<!-- AboutSectionView OK -->
<script setup>
import { ref } from 'vue';

const showContent = ref(false);

const valueList = [
  'Compasi√≥n',
  'Responsabilidad',
  'Transparencia',
  'Colaboraci√≥n',
];
</script>

<template>
  <section class="about-section">
    <article class="initial-content">
      <p class="mission-paragraph">
        Desde mi infancia, he compartido mi vida con una variedad de animales
        gracias a la influencia de mis padres. Mi madre, una amante apasionada
        de los animales, dej√≥ una marca indeleble en mi coraz√≥n con su devoci√≥n
        por ellos. Aunque falleci√≥ cuando yo ten√≠a solo 5 a√±os, su legado de
        amor por los animales perdura. En nuestra casa, conviv√≠amos con tortugas
        de tierra, perros, gatos, patos y m√°s, creando un entorno lleno de
        alegr√≠a y compa√±√≠a animal.
      </p>
    </article>
    
    <article v-if="showContent">
      <p class="mission-paragraph">
        Mi padre, quien tambi√©n se despidi√≥ de este mundo durante la pandemia,
        continu√≥ con la tradici√≥n de tener perros a su alrededor durante gran
        parte de su vida. Sin embargo, lleg√≥ un momento en el que, debido a la
        edad, ya no pudo hacerse cargo de ellos. A pesar de ello, su amor por
        los caninos siempre fue evidente y dej√≥ una profunda influencia en mi
        conexi√≥n con los animales.
      </p>
      <p class="mission-paragraph">
        Antes de mudarme a Barcelona desde Fuerteventura, decid√≠ adoptar a Lua,
        una encantadora mezcla de pich√≥n malt√©s que se convirti√≥ en mi fiel
        compa√±era durante 18 a√±os. Su p√©rdida fue dolorosa, pero su memoria vive
        en el nuevo miembro de la familia: Neo, un bodeguero con mezcla de
        podenco. Esta experiencia de cuidar y compartir mi vida con estos seres
        tan especiales me ha inspirado a contribuir de manera significativa a
        trav√©s de mi carrera como desarrollador web.
      </p>
      <p class="mission-paragraph">
        Ahora, como aspirante a Junior Developer, mi objetivo es trascender la
        tecnolog√≠a y utilizar mis habilidades para marcar la diferencia en la
        vida de los animales necesitados. Mi proyecto consiste en crear una
        p√°gina web dedicada a ayudar a los perros sin hogar a encontrar familias
        amorosas. Quiero dise√±ar una plataforma que no solo facilite la adopci√≥n
        de estos animales, sino que tambi√©n sensibilice a la sociedad sobre la
        importancia de la tenencia responsable de mascotas.
      </p>
      <p class="mission-paragraph">
        A trav√©s de esta iniciativa, busco fusionar mi pasi√≥n por la
        programaci√≥n con mi profundo amor y respeto por los animales. Quiero
        construir un puente tecnol√≥gico que conecte a personas con el deseo de
        dar un hogar a un perro con aquellos que buscan la compa√±√≠a leal y
        amorosa de un nuevo amigo peludo. Al hacerlo, espero contribuir a crear
        un mundo en el que cada perro tenga la oportunidad de vivir una vida
        plena y feliz en un hogar lleno de amor.
      </p>
    </article>

    <button
      @click="showContent = !showContent"
      v-if="!showContent"
      class="read-more-button"
      aria-expanded="false"
      aria-controls="additional-content"
    >
      Seguir Leyendo
    </button>
    <button
      @click="showContent = !showContent"
      v-else
      class="close-button"
      aria-expanded="true"
      aria-controls="additional-content"
    >
      Cerrar
    </button>

    <p><span class="values-heading">Valores:</span></p>
    <ul class="values-list">
      <li v-for="(value, index) in valueList" :key="index" class="value-item">
        {{ value }}
      </li>
    </ul>
  </section>
</template>

<style scoped>
.about-section {
  text-align: justify;
  padding: 1rem;
  border-radius: 8px;
  font-family: Arial, sans-serif;
}

.read-more-button,
.close-button {
  border: none;
  border-radius: 0.5rem;
  background-color: var(--accent-200);
  color: white;
  padding: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin-bottom: 1rem;
}

.read-more-button:hover,
.close-button:hover {
  background-color: var(--accent-100);
}

p {
  font-weight: 300;
  margin-bottom: 1rem;
}

.values-heading {
  font-weight: bold;
}

.values-list {
  list-style-type: disc;
  padding-left: 1rem;
}

.value-item {
  margin-bottom: 0.5rem;
}
</style>





--- File: views\Home\CallToActionSection.vue ---

<!-- HomeView.vue -->
<script setup>
import { ref } from "vue";
import { RouterLink } from "vue-router";

// Arreglo de enlaces principales
const mainLinks = [
  { name: "adoption", text: "Adopta un perro" },
  { name: "donate", text: "Dona" },
  {
    name: "volunteer",
    text: "S√© voluntario",
    external: true,
    href: "https://ajuntament.barcelona.cat/benestaranimal/es/voluntariado",
  },
];

// Arreglo de enlaces de redes sociales

const urlWeb = "https://https://canine-connect.netlify.app/";
const socialLinks = [
  {
    href: `https://api.whatsapp.com/send?text=Visita%20CanineConnect%20aqu√≠:%20${urlWeb}`,
    iconClass: "fa-whatsapp",
    alt: "WhatsApp",
  },
  {
    href: `https://www.addtoany.com/add_to/facebook?linkurl=${urlWeb}`,
    iconClass: "fa-facebook",
    alt: "Facebook",
  },
  {
    href: `https://www.addtoany.com/add_to/twitter?linkurl=${urlWeb}`,
    iconClass: "fa-twitter",
    alt: "Twitter",
  },
  {
    href: `https://www.addtoany.com/add_to/linkedin?linkurl=${urlWeb}`,
    iconClass: "fa-linkedin",
    alt: "LinkedIn",
  },
];
</script>

<template>
  <section class="call-to-action-section">
    <h2 class="cta-heading">¬øQuieres ayudar?</h2>
    <ul class="cta-list">
      <!-- Iterar sobre los enlaces principales -->
      <li v-for="link in mainLinks" :key="link.text" class="cta-item">
        <template v-if="link.external">
          <a :href="link.href" target="_blank" class="cta-link">{{
            link.text
          }}</a>
        </template>
        <template v-else>
          <RouterLink :to="{ name: link.name }" class="cta-link">{{
            link.text
          }}</RouterLink>
        </template>
      </li>
      <li class="cta-item cta-media">
        <span>¬°Comparte!</span>
        <!-- Enlace para compartir la p√°gina -->
        <div class="socialbtns">
          <ul>
            <li v-for="link in socialLinks" :key="link.iconClass">
              <a
                :href="link.href"
                class="fa fa-lg"
                :class="link.iconClass"
                :aria-label="link.alt"
                target="_blank"
              >
                <!-- Enlace visible para accesibilidad -->
                <span class="sr-only">{{ link.alt }}</span>
              </a>
            </li>
          </ul>
        </div>
      </li>
    </ul>
  </section>
</template>

<style scoped>
/* Estilo para ocultar el texto visible pero accesible */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

.cta-heading {
  font-size: 24px;
  margin-bottom: 20px;
}

.cta-list {
  list-style: none;
  padding: 0;
}

.cta-media {
  display: flex;
  gap: 3rem;
}
.cta-media span {
  margin-right: 1rem;
}

.cta-link,
span {
  text-decoration: none;
}

.cta-link:hover {
  border-bottom: 2px solid var(--accent-100);
}

.socialbtns {
  display: grid;
  place-items: center;
}

.socialbtns ul {
  padding: 0;
}

.socialbtns li {
  list-style: none;
  display: inline-block;
  margin-right: 1rem;
}

.socialbtns .fa {
  color: #fff;
  text-shadow: 1px 1px 0px #000, 1px -1px 0px #000, -1px 1px 0px #000,
    -1px -1px 0px #000;
  transition: all ease-out 0.5s;
}

.socialbtns .fa:hover {
  color: #000;
  text-shadow: 1px 1px 0px #fff, 1px -1px 0px #fff, -1px 1px 0px #fff,
    -1px -1px 0px #fff;
  transition: all ease 0.5s;
}
</style>



--- File: views\Home\HomeView.vue ---

<!-- HomeView OK -->
<script setup>
// Importamos los componentes
import AboutSectionView from "./AboutSectionView.vue";
import InspiringStoriesSectionView from "./InspiringStoriesSectionView.vue";
import CallToActionSection from "./CallToActionSection.vue";
import MissingDogView from "./MissingDogView.vue";
</script>

<template>
  <main class="main">
    <!-- Componentes incluidos en el orden requerido -->
    <MissingDogView />
    <AboutSectionView />
    <InspiringStoriesSectionView />
    <CallToActionSection />
  </main>
</template>

<style scoped></style>



--- File: views\Home\InspiringStoriesSectionView.vue ---

<!-- InspiringStoriesSectionView OK -->
<script setup>
import { useStoryStore } from "@/stores/storyStore";
import { useAuthStore } from "@/stores/authStore";

import InspiringStoriesCard from "../InspiringStories/InspiringStoriesCard.vue";
import InspiringStoriesModal from "../InspiringStories/InspiringStoriesModal.vue";

import { ref } from "vue";

const storyStore = useStoryStore();

const showModal = ref(false);
const selectedStory = ref(null);

const openModal = (story) => {
  selectedStory.value = story;
  showModal.value = true;
};

const closeModal = () => {
  showModal.value = false;
};
</script>

<template>
  <section class="inspiring-stories-section">
    <h2 class="stories-heading">Historias inspiradoras:</h2>
    <InspiringStoriesCard
      class="stories-list"
      v-for="story in storyStore.storiesCollection.slice(0, 5)"
      :story="story"
      :key="story.id"
      @click="openModal(story)"
    />
    <!-- Modal -->
    <div class="modal" v-if="showModal" @click.self="closeModal">
      <InspiringStoriesModal
        :selectedStory="selectedStory"
        @click="closeModal"
      />
    </div>
  </section>
</template>

<style scoped>
.inspiring-stories-section {
  margin-bottom: 4rem;
}
h2 {
  margin: 1rem 0 0;
}
.story-item {
  list-style: none;
  cursor: pointer;
}
.story-link {
  text-decoration: none;
}
.story-image {
  width: 10rem;
  height: 10rem;
  border-radius: 50%;
  float: left; /* Izquierda para esquina izquierda, derecha para esquina derecha */
  margin: 0 10px 0 0; /* Agrega espacio alrededor de la imagen */
}
span {
  color: red;
}
/* Estilos para el modal */
.modal {
  display: block;
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); /* Fondo semi-transparente */
  overflow: auto; /* Permitir desplazamiento si el contenido es largo */
}

</style>



--- File: views\Home\MissingDogView.vue ---

<!-- MissingDogView OK -->
<script setup>
import { ref, onMounted, computed } from "vue";
import {
  getStorage,
  ref as storageRef,
  listAll,
  getDownloadURL,
} from "firebase/storage";
import { useRouter } from "vue-router";
const router = useRouter();
// Obtener la instancia de Firebase Storage
const storage = getStorage();

// Referencia reactiva para almacenar las im√°genes
const images = ref([]);
// √çndice de la imagen actual en el carrusel
const currentIndex = ref(0);

// Funci√≥n para cambiar a la siguiente imagen en el carrusel
const nextImage = () => {
  currentIndex.value++;
  if (currentIndex.value >= images.value.length) {
    currentIndex.value = 0;
  }
};

// Funci√≥n para obtener y cargar las im√°genes de perros perdidos desde Firebase Storage
const imageLostDogsCollection = async () => {
  // Obtener la referencia al directorio de im√°genes
  const storageRefImages = storageRef(storage, "");
  try {
    // Obtener la lista de todas las im√°genes en el directorio
    const listResult = await listAll(storageRefImages);
    // Iterar sobre cada imagen en la lista
    for (const item of listResult.items) {
      // Obtener el nombre de la imagen
      const imageName = item.name;
      // Verificar si la imagen es de un perro perdido
      if (imageName.includes("lostDogs_images")) {
        // Obtener la URL de descarga de la imagen
        const imageUrl = await getDownloadURL(item);
        // A√±adir la URL de la imagen al array reactiva de im√°genes
        images.value.push(imageUrl);
      }
    }
  } catch (error) {
    // Manejar errores si ocurrieron durante la obtenci√≥n de las im√°genes
    console.error("Error al obtener las im√°genes:", error);
  }
};

const getClass = (index) => {
  if (index === currentIndex.value) {
    return "active";
  } else if (index === (currentIndex.value + 1) % images.value.length) {
    return "next";
  } else if (
    index ===
    (currentIndex.value - 1 + images.value.length) % images.value.length
  ) {
    return "previous";
  } else {
    return "hidden";
  }
};

const noResults = computed(() => {
  return images.value.length === 0;
});
// Ejecutar la funci√≥n de carga de im√°genes al montar el componente
onMounted(() => {
  imageLostDogsCollection();

  // Configurar un intervalo para cambiar autom√°ticamente la imagen cada 5 segundos
  setInterval(() => {
    nextImage();
  }, 5000);
});
</script>

<template>
  <div v-if="!noResults" class="pet-carousel">
    <div
      class="pet-description"
      @click="() => router.push({ name: 'lost-dogs' })"
    >
      <p class="pet-lost">Se Busca</p>
    </div>
    <div
      class="pet-card"
      :class="getClass(index)"
      v-for="(image, index) in images"
      :key="index"
      :style="{ backgroundImage: `url(${image})` }"
    >
      <!-- Descripci√≥n opcional de la imagen -->
    </div>
  </div>
  <div v-else style="display: none">
    <!-- Este div estar√° vac√≠o cuando no haya imagen cargada -->
  </div>
</template>

<style scoped>
/* Estilos para el carrusel de im√°genes */
.pet-carousel {
  position: relative;
  margin: 0 auto;
  width: 100%;
  height: 30rem;
  overflow: hidden;
  border-radius: 0.625rem;
  box-shadow: 0.25rem 0.25rem 0.5rem rgba(0, 0, 0, 0.25);
}
@media (min-width: 640px) {
  .pet-carousel {
    border-radius: 0;
    box-shadow: none;
  }
}
/* Estilos para cada imagen en el carrusel */
.pet-card {
  width: 100%;
  height: 100%;
  background-repeat: no-repeat;
  background-position: center;
  position: absolute;
  transition: transform 0.5s, opacity 0.5s;
  transform-style: preserve-3d;

  
}

/* Estilos para la imagen activa */
.pet-card.active {
  transform: translateX(0) scale(1);
  opacity: 1;
  z-index: 2;

}

/* Estilos para las im√°genes anteriores */
.pet-card.previous {
  transform: translateX(-30%) scale(0.7);
  opacity: 0.6;
  z-index: 1;
}

/* Estilos para las im√°genes siguientes */
.pet-card.next {
  transform: translateX(30%) scale(0.7);
  opacity: 0.6;
  z-index: 1;
}

/* Estilos para im√°genes ocultas */
.pet-card.hidden {
  display: none;
}

/* Estilos para la descripci√≥n de la imagen (opcional) */
.pet-description {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 100;
}

.pet-lost {
  text-transform: uppercase;
  font-size:clamp(4rem, 4vw + 1.5rem, 13.25rem);
  font-weight: 900;
  color: red;
  opacity: 0.4;
  letter-spacing: 3px;
  margin: 0;
  cursor: pointer;
}
</style>



--- File: views\Information\BreddsView.vue ---

<!-- BreddsView OK -->
<script setup>
import { onMounted } from "vue";
import { useDogBreedsStore } from "@/stores/dogBreedsStore";

// Inicializamos el store de razas de perros
const dogs = useDogBreedsStore();

// Usamos el lifecycle hook onMounted para obtener los datos de las razas de perros cuando el componente se monta
onMounted(async () => {
  await dogs.fetchDogBreedsData();
});
</script>

<template>
  <!-- Contenedor principal para las tarjetas de perros -->
  <div class="container">
    <!-- Recorremos los datos de las razas de perros y creamos una tarjeta para cada una -->
    <div class="card-container" v-for="dog in dogs.dogBreedsData" :key="dog.id">
      
      <div class="card">
        <!-- Contenedor para la imagen y el √≠cono -->
        <div class="image-container">
          <img :src="dog.image.url" :alt="dog.name" class="dog-image">
          <div class="icon-container">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              class="icon"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M15.042 21.672 13.684 16.6m0 0-2.51 2.225.569-9.47 5.227 7.917-3.286-.672ZM12 2.25V4.5m5.834.166-1.591 1.591M20.25 10.5H18M7.757 14.743l-1.59 1.59M6 10.5H3.75m4.007-4.243-1.59-1.59"
              />
            </svg>
            <!-- <div class="icon-text">M√°s informaci√≥n</div> -->
          </div>
        </div>

        <!-- Informaci√≥n del perro -->
        <div class="info">
          <h2>{{ dog.name }}</h2>
          <p><span>Origen:</span> {{ dog.origin }}</p>
          <p><span>Destinado a:</span> {{ dog.bred_for }}</p>
          <p><span>Temperamento:</span> {{ dog.temperament }}</p>
          <p><span>Altura:</span> {{ dog.height.metric }} cm</p>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
/* Estilos para el contenedor principal */
.container {
  display: flex;
  flex-wrap: wrap;
  
}

/* Estilos para el contenedor de cada tarjeta */
.card-container {
  width: 25rem;
  height: 38rem;
  perspective: 1000px;
  margin: 3rem auto;
}

/* Estilos para la tarjeta */
.card {
  width: 100%;
  height: 100%;
  position: relative;
  overflow: hidden;
  border-radius: 0.625rem;
  box-shadow: 0.25rem 0.25rem 0.5rem rgba(0, 0, 0, 0.25);
  transition: box-shadow 0.3s ease;
}

/* Estilos para el contenedor de la imagen y el √≠cono */
.image-container {
  position: relative;
  width: 100%;
  height: 100%;
}

/* Estilos para el contenedor del √≠cono y el texto */
.icon-container {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  background: rgba(0, 0, 0, 0.3); /* Fondo semitransparente */
  padding: 5px;
  border-radius: 50%;
  opacity: 1;
  transition: opacity 0.5s;
  z-index: 1;
}

/* Estilos para el √≠cono */
.icon {
  color: white;
  width: 38px; /* Ajusta el tama√±o seg√∫n sea necesario */
  height: 38px; /* Ajusta el tama√±o seg√∫n sea necesario */
}

/* Estilos para el texto debajo del √≠cono */
.icon-text {
  color: white;
  margin-top: 5px;
  font-size: 14px;
}

/* Estilos para la imagen del perro */
.dog-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: height 0.5s;
}

/* Estilos para la informaci√≥n del perro */
.info {
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 60%;
  background: #fff;
  padding: 10px;
  box-sizing: border-box;
  opacity: 0;
  transition: opacity 0.5s;
  z-index: 2;

}

/* Estilos para el hover de la tarjeta */
.card:hover{
  transform: scale(1.05);
  transition: transform 500ms ease-in;
}

.card:hover .dog-image {
  height: 50%;

}

.card:hover .info {
  opacity: 1;
}

.card:hover .icon-container {
  opacity: 0;
}

/* Estilos para los encabezados en la informaci√≥n del perro */
.info h2 {
  margin: 0;
}

/* Estilos para los p√°rrafos en la informaci√≥n del perro */
.info p span {
  margin: 5px 0;
  font-size: 1.3rem;
  font-weight: 700;
  color: var(--accent-200);
}
</style>



--- File: views\Information\CareTipsView.vue ---

<!-- CareTipsView OK -->
<script setup>
import { RouterLink } from "vue-router"; // Importamos RouterLink para la navegaci√≥n
</script>

<template>
  <div class="container">
    <div class="content">
      <h2 class="title">Informaci√≥n sobre el cuidado de perros</h2>
      <h3 class="subtitle">Consejos para tener un perro feliz y saludable</h3>
    </div>
    <section class="section">
      ¬°Hola! CanineConnect es un espacio dedicado a la conexi√≥n entre personas y perros. En esta secci√≥n, queremos ayudarte a tener una relaci√≥n sana y feliz con tu mejor amigo peludo.
    </section>
    <h3 class="subtitle">Sab√≠as que...</h3>
    <section class="section">
      Cada a√±o, miles de perros son abandonados en Espa√±a. La falta de informaci√≥n sobre el cuidado adecuado es una de las principales causas de abandono. Un perro bien cuidado puede vivir una vida larga y saludable. En CanineConnect, queremos ayudarte a tener una relaci√≥n sana y feliz con tu mejor amigo peludo. Descubre c√≥mo elegir la raza adecuada para tu estilo de vida
      <router-link class="nav-link" :to="{ name: 'breeds' }">Razas de perros</router-link>
      y aprende sobre la importancia de la tenencia responsable
      <router-link class="nav-link" :to="{ name: 'stewardship' }">Tenencia responsable</router-link>.
    </section>
  </div>
</template>

<style scoped>
/* Contenedor principal */
.container {
  padding: 0 1rem;
  text-align: justify;
}

/* Estilos responsivos para el contenedor principal */
@media (min-width: 640px) {
  .container {
    max-width: 120rem;
    margin: 0 auto;
  }
}

/* Estilos para el contenido */
.content {
  margin-bottom: 1rem;
}

/* Estilos para el t√≠tulo */
.title {
  color: #333;
}

/* Estilos para el subt√≠tulo */
.subtitle {
  font-style: italic;
}

/* Estilos para las secciones */
.section {
  margin-bottom: 1.5rem;
}

/* Estilos para los enlaces de navegaci√≥n */
.nav-link {
  text-decoration: none;
  text-align: center;
  padding: 0.5rem;
  color:var(--accent-200);
  font-weight: 700;
}
</style>



--- File: views\Information\InformationView.vue ---

<!-- CareTipsView OK -->
<script setup>
import { RouterLink, RouterView } from "vue-router"; 
</script>

<template>
  <nav class="nav">
    <!-- Enlaces de navegaci√≥n -->
    <router-link active-class="active-link" class="nav-link" :to="{ name: 'care' }">Cuidado Canino</router-link>
    <router-link active-class="active-link" class="nav-link" :to="{ name: 'breeds' }">Razas de perros</router-link>
    <router-link active-class="active-link" class="nav-link" :to="{ name: 'stewardship' }">Tenencia responsable</router-link>
  </nav>
  
  <!-- Componente para renderizar vistas seg√∫n la ruta -->
  <RouterView />
</template>

<style scoped>
/* Estilos para el contenedor de navegaci√≥n */
nav {
  justify-content: center;
  gap: 1rem;
  top: 1rem;
  display: flex;
  padding: 1rem;
}

/* Estilos para los enlaces de navegaci√≥n */
.nav-link {
  text-decoration: none;
  text-align: center;
  padding: 0.5rem;
}


/* Estilos para el enlace activo */
.active-link {
  color: var( --accent-100);
  font-weight: 600;
}
</style>



--- File: views\Information\StewardshipView.vue ---

<template>
  <div>
    <h2>Introducci√≥n a la Tenencia Responsable de Perros</h2>
    <p>
      En nuestra comunidad, creemos firmemente en promover la tenencia
      responsable de perros como un compromiso vital para garantizar su salud,
      bienestar y felicidad. Entendemos que tener un perro va m√°s all√° de
      simplemente proveerle alimento y refugio; implica proporcionar cuidados
      m√©dicos regulares, estimulaci√≥n f√≠sica y mental adecuada, y educaci√≥n
      continua para fomentar un comportamiento positivo. En esta p√°gina,
      encontrar√°s recursos completos y consejos pr√°cticos sobre c√≥mo cuidar a tu
      perro de manera responsable, desde la alimentaci√≥n adecuada hasta el
      cumplimiento de normativas locales. Nuestro objetivo es ayudarte a crear
      un entorno amoroso y seguro para tu fiel compa√±ero canino, mejorando as√≠
      la calidad de vida tanto para ellos como para ti. ¬°√önete a nosotros en
      este viaje hacia una tenencia responsable y satisfactoria de perros!
    </p>
    <article>
      <h3>Alimentaci√≥n adecuada:</h3>
      <p>
        Proporcionar una alimentaci√≥n adecuada es crucial para la salud y el
        bienestar de tu perro. La dieta debe adaptarse a sus necesidades
        espec√≠ficas seg√∫n su edad, tama√±o, nivel de actividad y condiciones de
        salud. Consulta con un veterinario para establecer un plan de
        alimentaci√≥n adecuado y para determinar la cantidad apropiada de
        alimento diario. Los perros necesitan una dieta balanceada que incluya
        prote√≠nas, carbohidratos, grasas, vitaminas y minerales. Es importante
        seleccionar alimentos de alta calidad dise√±ados espec√≠ficamente para
        perros, evitando aquellos con ingredientes artificiales, conservantes o
        aditivos que puedan ser perjudiciales a largo plazo. Una dieta
        equilibrada no solo promueve una buena salud f√≠sica, como el
        mantenimiento del peso ideal y la salud de la piel y el pelaje, sino que
        tambi√©n contribuye al bienestar general y a la longevidad de tu mascota.
        Adem√°s de proporcionar comida de calidad, aseg√∫rate de establecer
        horarios regulares de alimentaci√≥n y evita alimentar a tu perro con
        alimentos humanos que pueden ser perjudiciales para su salud. Monitorea
        su peso y ajusta la cantidad de comida seg√∫n sea necesario para
        mantenerlo en un estado corporal saludable a lo largo de su vida.
      </p>
    </article>
    <article>
      <h3>Alojamiento adecuado:</h3>
      <p>
        El alojamiento de tu perro es fundamental para su bienestar f√≠sico y
        emocional. Ya sea que tu perro viva dentro de casa o en un √°rea
        exterior, es crucial proporcionarle un espacio seguro, limpio y c√≥modo
        donde pueda descansar, jugar y refugiarse. Dentro de casa, elige un √°rea
        tranquila y protegida de corrientes de aire y cambios bruscos de
        temperatura. Proporciona una cama suave y c√≥moda que sea lo
        suficientemente grande para que tu perro se estire completamente. Si tu
        perro vive en el exterior, aseg√∫rate de proporcionarle un refugio
        resistente a la intemperie que lo proteja del calor, el fr√≠o y la
        humedad. El refugio debe ser lo suficientemente grande para permitirle
        moverse libremente y debe estar bien ventilado. Proporciona acceso
        constante a agua fresca y limpia, y aseg√∫rate de limpiar regularmente el
        √°rea para mantenerla libre de suciedad y par√°sitos. Adem√°s del espacio
        f√≠sico, es importante ofrecerle a tu perro estimulaci√≥n mental y
        socializaci√≥n. Proporciona juguetes interactivos y actividades
        enriquecedoras que ayuden a mantenerlo mentalmente activo y
        emocionalmente feliz. Dedica tiempo diario para jugar y socializar con
        tu perro, ya que la interacci√≥n humana y la estimulaci√≥n mental son
        cruciales para su bienestar general.
      </p>
    </article>
    <article>
      <h3>Cuidado veterinario:</h3>
      <p>
        El cuidado veterinario regular es esencial para garantizar la salud y el
        bienestar a largo plazo de tu perro. Programa visitas peri√≥dicas al
        veterinario para chequeos de salud preventivos, vacunas actualizadas,
        desparasitaciones y cualquier tratamiento m√©dico necesario. Establece
        una relaci√≥n de confianza con tu veterinario para poder discutir
        cualquier preocupaci√≥n de salud o cambio en el comportamiento de tu
        perro. Durante las visitas veterinarias, se realizar√°n ex√°menes f√≠sicos
        completos para detectar cualquier signo temprano de enfermedad o
        condiciones de salud subyacentes. Tu veterinario puede recomendar
        pruebas adicionales seg√∫n la edad y la salud general de tu perro, como
        an√°lisis de sangre, an√°lisis de heces o pruebas de funci√≥n renal. Mant√©n
        un registro actualizado de las vacunas administradas y sigue las pautas
        de desparasitaci√≥n recomendadas para proteger a tu perro de par√°sitos
        internos y externos. Adem√°s de las visitas regulares al veterinario, es
        importante estar atento a cualquier cambio en el comportamiento,
        apetito, nivel de energ√≠a o funci√≥n f√≠sica de tu perro. Si notas alg√∫n
        s√≠ntoma preocupante, como letargo persistente, p√©rdida de apetito,
        v√≥mitos o diarrea, consulta inmediatamente a tu veterinario para recibir
        un diagn√≥stico y tratamiento adecuados.
      </p>
    </article>
    <article>
      <h3>Ejercicio y estimulaci√≥n:</h3>
      <p>
        El ejercicio regular es fundamental para mantener a tu perro en buena
        forma f√≠sica y mental. La cantidad y tipo de ejercicio variar√°n seg√∫n la
        edad, raza y nivel de energ√≠a de tu perro, pero todos los perros
        necesitan actividad f√≠sica diaria para mantener su salud y bienestar
        general. Los paseos regulares son esenciales para proporcionar
        estimulaci√≥n mental y socializaci√≥n, adem√°s de satisfacer la necesidad
        instintiva de explorar y oler su entorno. Adem√°s de los paseos,
        considera otras formas de ejercicio como juegos de buscar y traer,
        carreras cortas, nataci√≥n o participaci√≥n en deportes caninos como el
        agility. El ejercicio no solo ayuda a mantener un peso saludable y una
        buena condici√≥n f√≠sica, sino que tambi√©n promueve un comportamiento
        calmado y reduce el riesgo de problemas de salud relacionados con la
        inactividad, como la obesidad y la diabetes. Adem√°s del ejercicio
        f√≠sico, es importante proporcionar estimulaci√≥n mental a trav√©s de
        juegos interactivos, rompecabezas para perros y entrenamiento de
        obediencia. El enriquecimiento ambiental ayuda a mantener la mente de tu
        perro activa y reduce el aburrimiento y la ansiedad. Dedica tiempo
        diario para interactuar y jugar con tu perro, fortaleciendo as√≠ el
        v√≠nculo entre ambos y mejorando su calidad de vida general.
      </p>
    </article>
    <article>
      <h3>Educaci√≥n y entrenamiento:</h3>
      <p>
        El entrenamiento adecuado es esencial para desarrollar buenos h√°bitos y
        un comportamiento socialmente aceptable en tu perro. Utiliza m√©todos de
        entrenamiento positivos basados en el refuerzo positivo y el elogio para
        ense√±arle comandos b√°sicos como sentarse, quedarse y venir cuando se le
        llama. Establecer una rutina de entrenamiento consistente ayuda a tu
        perro a entender las expectativas y a comportarse adecuadamente en
        diferentes situaciones. Adem√°s de las habilidades b√°sicas, el
        entrenamiento tambi√©n incluye ense√±arle a tu perro c√≥mo interactuar de
        manera segura y amigable con otros perros y personas. La socializaci√≥n
        temprana es clave para ayudar a tu perro a desarrollar confianza y
        habilidades de comunicaci√≥n adecuadas. Exp√≥n a tu perro a diferentes
        ambientes, sonidos y est√≠mulos desde una edad temprana para reducir el
        riesgo de problemas de comportamiento relacionados con el miedo o la
        ansiedad. El entrenamiento no solo mejora la obediencia de tu perro,
        sino que tambi√©n fortalece el v√≠nculo entre t√∫ y tu mascota. Celebra los
        √©xitos y logros de tu perro con elogios, caricias y peque√±as
        recompensas, reforzando as√≠ los comportamientos deseables y fomentando
        una relaci√≥n positiva y de confianza mutua.
      </p>
    </article>
    <article>
      <h3>Identificaci√≥n y control:</h3>
      <p>
        La identificaci√≥n adecuada y el control responsable son fundamentales
        para la seguridad de tu perro y su retorno seguro en caso de p√©rdida.
        Coloca un collar resistente con una placa de identificaci√≥n claramente
        visible que incluya su nombre y tu informaci√≥n de contacto actualizada.
        Adem√°s de la identificaci√≥n visual, considera la implantaci√≥n de un
        microchip como una forma segura y permanente de identificaci√≥n. Los
        microchips son peque√±os dispositivos implantados bajo la piel de tu
        perro que contienen un n√∫mero √∫nico de identificaci√≥n. Este n√∫mero est√°
        registrado en una base de datos nacional que se puede escanear en
        cualquier cl√≠nica veterinaria o refugio de animales para recuperar
        r√°pidamente tus datos de contacto. Aseg√∫rate de mantener tus detalles de
        contacto actualizados en la base de datos del microchip para garantizar
        que puedas ser contactado en caso de emergencia. Cumplir con las
        regulaciones locales sobre el uso de correa y el control de perros en
        √°reas p√∫blicas es esencial para garantizar la seguridad de tu perro y de
        los dem√°s. Siempre mant√©n a tu perro con correa cuando est√© fuera de
        casa y respeta las normativas locales sobre parques y espacios p√∫blicos
        designados para perros.
      </p>
    </article>
    <article>
      <h3>Bienestar emocional:</h3>
      <p>
        El bienestar emocional de tu perro es tan importante como su salud
        f√≠sica. Los perros son animales sociales que necesitan afecto, atenci√≥n
        y compa√±√≠a para prosperar. Dedica tiempo diario a interactuar y jugar
        con tu perro, fortaleciendo as√≠ el v√≠nculo entre ambos y promoviendo su
        bienestar emocional.
      </p>
    </article>
  </div>
</template>

<script setup></script>

<style scoped>
h2 {
  text-align: center;
}
h3{
    margin: 2rem 0 1rem 0;
    color: var(--accent-200)
}
</style>



--- File: views\InspiringStories\InspiringStoriesCard.vue ---

<!-- InspiringStoriesCard -->
<script setup>
/* Definici√≥n de propiedades (props) */
const props = defineProps({
  story: {
    type: Object,
    required: true,
  },
});

const emit = defineEmits(["openModal"]);
</script>

<template>
  <div class="card-container">
    <div class="story-image-container">
      <h3 class="story-title">{{ story.storyTitle }}</h3>
      <img
        :src="story.image"
        :alt="story.storyTitle"
        class="story-image"
        loading="lazy"
      />
      <p>{{ story.overcomingFear }}</p>
    </div>
    <div>
      <a
        class="info"
        @click="$emit('openModal', story)"
        >+Info</a
      >
    </div>
  </div>
</template>
<style scoped>
.card-container {
  display: flex;
  flex-direction: column;
  padding: 0.5rem;
  margin-bottom: 2rem;
  border-radius: 0.625rem;
  box-shadow: 0.25rem 0.25rem 0.5rem rgba(0, 0, 0, 0.25);
  cursor: pointer;
}
.card-container:hover {
  transform: scale(1.05);
  transition: transform 500ms ease-in;
}
h2 {
  display: inline-block;
}
.story-image-container {
  padding: 1rem;
}
.story-image {
  width: 10rem;
  height: 10rem;
  float: left;
  border-radius: 50%;
  border: 3px solid var(--accent-100);
  margin: 0 10px 0 0; /* Agrega espacio alrededor de la imagen */
}
.info {
  background-color: var(--accent-200);
  border-radius: 5px;
  cursor: pointer;
  color: var(--bg-0);
  font-size: 10px;
  padding: 6px 15px;
  text-decoration: none;
  float: right;
}
.info:hover {
  background-color: var(--accent-100);
}
</style>



--- File: views\InspiringStories\InspiringStoriesModal.vue ---

<script setup>
const props = defineProps({
  selectedStory: {
    type: Object,
    required: true,
  },
});

const emit = defineEmits(["closeModal"]);
</script>

<template>
  <div class="modal-content">
    <span class="close-button" @click="$emit('closeModal')">&times;</span>
    <img
      :src="selectedStory?.image"
      :alt="selectedStory?.storyTitle"
      class="modal-image"
      loading="lazy"
    />
    <h2 class="modal-title">{{ selectedStory?.storyTitle }}</h2>
    <div class="modal-details">
      <p><span>Refugio:</span> {{ selectedStory?.refugeName }}</p>
      <p>
        <span>Contacto:</span> {{ selectedStory?.contactName }} ({{
          selectedStory?.email
        }})
      </p>
      <p><span>Edad del Perro:</span> {{ selectedStory?.dogAge }}</p>
      <p><span>Sexo:</span> {{ selectedStory?.sex }}</p>
      <p><span>Fecha de Rescate:</span> {{ selectedStory?.rescueDate }}</p>
      <p>
        <span>Ubicaci√≥n de Rescate:</span> {{ selectedStory?.rescueLocation }}
      </p>
      <p><span>Historial M√©dico:</span> {{ selectedStory?.medicalHistory }}</p>
      <p><span>Estado Actual:</span> {{ selectedStory?.currentStatus }}</p>
      <p>
        <span>Desaf√≠os Superados:</span> {{ selectedStory?.overcomingFear }}
      </p>
      <p>
        <span>Personalidad y Talentos:</span>
        {{ selectedStory?.dogPersonality }}
      </p>
      <p class="url">
        URL Web
        <br />
        <a :href="selectedStory?.urlWeb" target="_blank">{{
          selectedStory?.urlWeb
        }}</a>
      </p>
    </div>
  </div>
</template>
<style scoped>
.modal-content {
  background-color: #fff;
  margin: 10% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 90%;
  max-width: 45rem;
  border-radius: 8px;
  position: relative;
}
@media (min-width: 640px) {
  .modal-content {
    max-width: 55rem;
  }
}
p span {
  color: var(--accent-200);
}
.url {
  text-align: center;
}
.close-button {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close-button:hover,
.close-button:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

.modal-image {
  width: 100%;
  height: 30rem;
  border-radius: 8px;
  margin-bottom: 1rem;
}

.modal-title {
  font-size: 2rem;
  margin-bottom: 1rem;
}

.modal-details {
  margin-bottom: 1rem;
}

.modal-details p {
  margin-bottom: 0.5rem;
}

.modal-details span {
  font-weight: bold;
}

.modal-details a {
  color: var(--accent-100);
  text-decoration: none;
}

.modal-details a:hover {
  text-decoration: underline;
}
</style>



--- File: views\InspiringStories\InspiringStoriesView.vue ---

<script setup>
import { ref } from "vue";
import { useStoryStore } from "@/stores/storyStore";
import { useAuthStore } from "@/stores/authStore";

import InspiringStoriesCard from "./InspiringStoriesCard.vue";
import InspiringStoriesModal from "./InspiringStoriesModal.vue";
import Link from "@/components/Link.vue";

const storyStore = useStoryStore();
const authStore = useAuthStore();
const showModal = ref(false);
const selectedStory = ref(null);

const openModal = (story) => {
  selectedStory.value = story;
  showModal.value = true;
};

const closeModal = () => {
  showModal.value = false;
};
</script>

<template>
  <Link v-if="authStore.isAdmin" to="add-inspiring-story"
    >Agrega tu Historia</Link
  >

  <h2>Un mundo de amor, lealtad y hero√≠smo te espera</h2>

  <p>
    Ad√©ntrate en un espacio donde la bondad canina brilla con luz propia.
    Descubre conmovedoras historias de perros que han desafiado obst√°culos,
    salvado vidas y brindado amor incondicional. Sus relatos te llenar√°n de
    esperanza, te inspirar√°n a ser una mejor persona y te recordar√°n el
    incre√≠ble poder que tiene la conexi√≥n entre humanos y animales.
  </p>

  <span
    >M√°s que mascotas, estos perros son h√©roes, amigos y compa√±eros
    excepcionales.</span
  >

  <p>
    Sum√©rgete en sus inspiradoras historias y descubre el verdadero significado
    de la lealtad, la valent√≠a y el amor incondicional.
  </p>

  <p>
    Prep√°rate para re√≠r, llorar y sentirte emocionado mientras exploras estas
    narraciones que te cautivar√°n y te transportar√°n a un mundo donde los perros
    son m√°s que animales.
  </p>

  <p>
    En Canicine Connect, celebramos el esp√≠ritu inspirador de los perros y
    compartimos historias que te conmover√°n el coraz√≥n. Explora las diferentes
    categor√≠as y descubre historias que te sorprender√°n, te motivar√°n y te
    recordar√°n el poder transformador del amor y la amistad. ¬°√önete a nuestra
    comunidad y forma parte de este homenaje a los perros que hacen del mundo un
    lugar mejor!
  </p>

  <section class="inspiring-stories-section">
    <h3 class="stories-heading">Historias inspiradoras</h3>
    <!-- Cada elemento de la lista representa una historia inspiradora -->
    <InspiringStoriesCard
      class="stories-list"
      v-for="story in storyStore.storiesCollection.slice(0, 5)"
      :story="story"
      :key="story.id"
      @click="openModal(story)"
    />
    <!-- Modal -->
    <div class="modal" v-if="showModal">
      <InspiringStoriesModal
        :selectedStory="selectedStory"
        @click="closeModal"
      />
    </div>
  </section>
</template>

<style scoped>
h2 {
  margin: 1rem 0;
  text-align: center;
}
.inspiring-stories-section {
  margin-bottom: 4rem;
}

.stories-list {
  cursor: pointer;
}
/* Estilos para el modal */
.modal {
  display: block;
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); /* Fondo semi-transparente */
  overflow: auto; /* Permitir desplazamiento si el contenido es largo */
}
</style>



--- File: views\InspiringStories\ReportInspireStoryView.vue ---

<!-- ReportFoundItemView OK -->
<script setup>
/* Importaciones de bibliotecas externas */
import { reactive, watch } from "vue";
import { useRouter } from "vue-router";

/* Importaciones de componentes locales */
import Link from "@/components/Link.vue";
import SpinnerDog from "@/components/SpinnerDog.vue";

/* Importaciones de stores */
import { useAuthStore } from "@/stores/authStore";
import { useStoryStore } from "@/stores/storyStore";

/* Importaciones de composables */
import useImage from "@/composables/useImage";
/* Importaciones de helpers */
import { limitCharacters } from "@/helpers";

// Usamos el composable para el manejo de im√°genes y extraemos las propiedades necesarias
const { url, onFileChange, isImageUploaded, spinner } =
  useImage("inspiring_stories");

// Usamos el store de items y de auth
const authStore = useAuthStore();
const storyStore = useStoryStore();
// Inicializamos hooks de Vue Router
const router = useRouter();

// Definimos los datos del formulario de manera reactiva
const formData = reactive({
  refugeName: "",
  contactName: "",
  email: "",
  phone: "",
  dogName: "",
  dogBreed: "",
  dogAge: "",
  sex: "",
  rescueDate: "",
  rescueLocation: "",
  medicalHistory: "",
  currentStatus: "",
  image: "",
  storyTitle: "",
  rescuedDog: "",
  overcomingFear: "",
  dogPersonality: "",
  urlWeb: "",
});

// Funci√≥n para manejar el env√≠o del formulario
const handleSubmit = async (data) => {
  const { image, ...values } = data;

  try {
    // Creamos un nuevo item usando el store
    await storyStore.createStory({
      ...values,
      userId: authStore.userData.uid, // Incorporamos userId con el UID del usuario autenticado
      image: url.value, // Usamos la URL de la imagen subida
    });
    // Redirigimos a la p√°gina de "lost-items" despu√©s de la creaci√≥n
    router.push({ name: "inspiring-stories" });
  } catch (error) {
    console.log(error); // Manejamos cualquier error que ocurra durante la creaci√≥n
  }
};

// Funci√≥n para manejar la limitaci√≥n de caracteres
const handleLimitCharacters = (field, maxLength) => {
  limitCharacters(formData, field, maxLength);
};
</script>

<template>
  <div class="container">
    <h1 class="gratitude-note">
      Comparte la historia extraordinaria de tu perro y ay√∫dalo a inspirar a
      otros
    </h1>
    <p>
      En Canicine Connect, creemos que cada perro tiene una historia que contar.
      Tu perro es un h√©roe, un compa√±ero leal, un amigo incondicional. A trav√©s
      de este formulario, puedes compartir su historia inspiradora con el mundo
      y ayudar a otros a ver el incre√≠ble poder del v√≠nculo entre perros y
      humanos.
    </p>
    <h2>¬øQu√© tipo de historia puedes compartir?</h2>
    <ul>
      <li>
        Historias de perros que han superado la adversidad (enfermedad, lesi√≥n,
        abandono)
      </li>
      <li>
        Historias de perros que han brindado amor y apoyo a otros (terapia,
        asistencia)
      </li>
      <li>Historias de perros que han realizado actos heroicos</li>
      <li>
        Historias de perros que han demostrado una lealtad y valent√≠a
        excepcionales
      </li>
      <li>
        Historias de perros que han formado un v√≠nculo inquebrantable con sus
        humanos
      </li>
    </ul>
    <p>
      ¬°Juntos, podemos celebrar el esp√≠ritu inspirador de los perros y hacer del
      mundo un lugar mejor!
    </p>
    <!-- Enlace para volver a la lista de objetos perdidos -->
    <Link to="inspiring-stories">Volver a Historias</Link>

    <!-- Formulario -->
    <div class="form">
      <FormKit type="form" submit-label="Enviar" @submit="handleSubmit">
        <!-- Campos del formulario -->
        <h3>Informaci√≥n General</h3>
        <FormKit
          type="text"
          label="Nombre del Refugio"
          name="refugeName"
          placeholder="Nombre del Refugio"
          validation="required"
          :validation-messages="{ required: 'El Nombre es Obligatorio' }"
          v-model.trim="formData.refugeName"
        />
        <FormKit
          type="text"
          label="Nombre del Contacto"
          name="contactName"
          placeholder="Nombre del Contacto"
          validation="required"
          :validation-messages="{ required: 'El Contacto es Obligatorio' }"
          v-model.trim="formData.contactName"
        />
        <FormKit
          type="email"
          label="Email"
          name="email"
          placeholder="Email"
          validation="required"
          :validation-messages="{ required: 'El Email es Obligatorio' }"
          v-model.trim="formData.email"
        />
        <FormKit
          type="tel"
          label="Tel√©fono"
          name="phone"
          placeholder="N√∫mero de Tel√©fono"
          validation="required"
          :validation-messages="{ required: 'El Tel√©fono es Obligatorio' }"
          v-model.trim="formData.phone"
        />
        <h3>Informaci√≥n del Perro</h3>

        <FormKit
          type="text"
          label="Nombre del Perro"
          name="dogName"
          placeholder="Nombre del Perro"
          validation="required"
          :validation-messages="{ required: 'El Nombre es Obligatorio' }"
          v-model.trim="formData.dogName"
        />
        <!-- Imagen -->
        <FormKit
          type="file"
          label="A√±ade una imagen del objeto y espera a que se cargue"
          name="image"
          placeholder="Imagen"
          validation="required"
          :validation-messages="{
            required: 'La imagen es obligatoria',
          }"
          @change="onFileChange"
          v-model.trim="formData.image"
        />
        <!-- Spinner y previsualizaci√≥n de la imagen -->
        <div v-if="spinner" class="spinner">
          <SpinnerDog />
        </div>
        <div v-else-if="isImageUploaded" class="image-container">
          <img :src="url" alt="Nueva imagen producto" class="image" />
        </div>

        <FormKit
          type="text"
          label="Raza"
          name="dogBreed"
          placeholder="Raza"
          validation="required"
          :validation-messages="{ required: 'La Raza es Obligatoria' }"
          v-model.trim="formData.dogBreed"
        />
        <FormKit
          type="number"
          label="Edad"
          name="dogAge"
          placeholder="Edad"
          validation="required"
          :validation-messages="{ required: 'La Edad es Obligatoria' }"
          v-model.trim="formData.dogAge"
        />
        <FormKit
          type="radio"
          label="Sexo del Perro"
          name="sex"
          :options="['Indiferente','Macho', 'Hembra']"
          validation="required"
          :validation-messages="{ required: 'Seleccionar Sexo es Obligatorio' }"
          v-model="formData.sex"
        />
        <FormKit
          type="date"
          label="Fecha de Rescate"
          name="rescueDate"
          placeholder="Fecha de Rescate"
          validation="required"
          :validation-messages="{ required: 'La Fecha es Obligatoria' }"
          v-model.trim="formData.rescueDate"
        />
        <FormKit
          type="text"
          label="Ubicaci√≥n del Rescate"
          name="rescueLocation"
          placeholder="Ubicaci√≥n del Rescate"
          validation="required"
          :validation-messages="{ required: 'La Ubicaci√≥n es Obligatoria' }"
          v-model.trim="formData.rescueLocation"
        />
        <FormKit
          type="textarea"
          label="Historial M√©dico"
          name="medicalHistory"
          placeholder="Historial M√©dico"
          :help="`${formData.medicalHistory.length} / 300`"
          validation="length:0,300"
          :validation-messages="{
            length: 'La Descripci√≥n no puede tener m√°s de 300 caracteres',
          }"
          validation-visibility="blur"
          v-model.number="formData.medicalHistory"
          @input="handleLimitCharacters('medicalHistory', 300)"
        />
        <FormKit
          type="textarea"
          label="Estado Actual"
          name="currentStatus"
          placeholder="Estado Actual"
          :help="`${formData.currentStatus.length} / 300`"
          validation="length:0,300"
          :validation-messages="{
            length: 'La Descripci√≥n no puede tener m√°s de 300 caracteres',
          }"
          validation-visibility="blur"
          v-model.number="formData.currentStatus"
          @input="handleLimitCharacters('currentStatus', 300)"
        />
        <FormKit
          type="checkbox"
          label="Permiso de Uso de Imagen"
          name="terms"
          :value="true"
          validation="accepted"
          validation-visibility="dirty"
          :validation-messages="{ required: 'Acepta Uso de Imagen' }"
          v-model="formData.terms"
        />
        <h3>Contenido de la Historia</h3>
        <FormKit
          type="text"
          label="T√≠tulo de la Historia"
          name="storyTitle"
          placeholder="T√≠tulo"
          validation="required"
          :validation-messages="{ required: 'El T√≠tulo es Obligatorio' }"
          v-model.trim="formData.storyTitle"
        />
        <FormKit
          type="textarea"
          label="C√≥mo lleg√≥ el perro al refugio"
          name="rescuedDog"
          placeholder="Breve descripci√≥n"
          :help="`${formData.rescuedDog.length} / 300`"
          validation="required | length:0,300"
          :validation-messages="{
            required: 'La Descripci√≥n es Obligatoria',
            length: 'La Descripci√≥n no puede tener m√°s de 300 caracteres',
          }"
          validation-visibility="blur"
          v-model.trim="formData.rescuedDog"
          @input="handleLimitCharacters('rescuedDog', 300)"
        />
        <FormKit
          type="textarea"
          label="Desaf√≠os que ha Superado"
          name="overcomingFear"
          placeholder="Desaf√≠os"
          :help="`${formData.overcomingFear.length} / 300`"
          validation="length:0,300"
          :validation-messages="{
            length: 'La Descripci√≥n no puede tener m√°s de 300 caracteres',
          }"
          validation-visibility="blur"
          v-model.number="formData.overcomingFear"
          @input="handleLimitCharacters('overcomingFear', 300)"
        />
        <FormKit
          type="textarea"
          label="Personalidad y Talentos √önicos"
          name="dogPersonality"
          placeholder="Personalidad"
          :help="`${formData.dogPersonality.length} / 300`"
          validation="length:0,300"
          :validation-messages="{
            length: 'La Descripci√≥n no puede tener m√°s de 300 caracteres',
          }"
          validation-visibility="blur"
          v-model.number="formData.dogPersonality"
          @input="handleLimitCharacters('dogPersonality', 300)"
        />
        <FormKit
          type="url"
          label="Agrega Enlace"
          name="urlWeb"
          placeholder="https://www.example.com..."
          validation="required|url"
          :validation-messages="{ required: 'El Enlace es Obligatorio' }"
          v-model.trim="formData.urlWeb"
        />
      </FormKit>
    </div>
  </div>
</template>

<style scoped>
h2 {
  margin: 1rem auto;
  color: var(--accent-200);
}
ul {
  list-style: disc;
}
/* Estilo para el spinner */
.spinner {
  display: flex;
  justify-content: space-around;
  margin-top: 6rem;
}

/* Nota de agradecimiento */
.gratitude-note {
  text-align: center;
}

/* Estilo del formulario */
.form {
  display: flex;
  justify-content: center; /* Centrar horizontalmente */
  align-items: center; /* Centrar verticalmente */
  min-height: 50vh; /* Altura m√≠nima para centrar verticalmente */
}

.form > * {
  max-width: 40rem; /* Ancho m√°ximo del formulario */
  width: 100%; /* Hace que el formulario ocupe todo el ancho disponible */
  margin: 0 auto;
  margin-bottom: 1rem; /* Espaciado entre elementos del formulario */
}

/* Contenedor para la imagen */
.image-container {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  margin-bottom: 1rem;
}

/* Estilo de la imagen */
.image {
  max-width: 20rem; /* Ajusta el ancho de la imagen */
  height: auto; /* Mantiene la proporci√≥n de la imagen */
  max-height: 20rem; /* Limita la altura m√°xima de la imagen */
}
</style>



--- File: views\Items\EditFoundItemView.vue ---

<!-- EditFoundItemView OK -->
<script setup>
/* Importaciones de bibliotecas externas */
import { reactive, watch, ref, nextTick } from "vue";
import { useRouter, useRoute } from "vue-router";
import { doc } from "firebase/firestore";
import { useDocument, useFirestore } from "vuefire";
import "leaflet/dist/leaflet.css";
import { LMap, LTileLayer, LMarker } from "@vue-leaflet/vue-leaflet";

/* Importaciones de componentes locales */
import Link from "@/components/Link.vue";
import SpinnerDog from "@/components/SpinnerDog.vue";

/* Importaciones de stores */
import { useItemsStore } from "@/stores/itemsStore.js";

/* Importaciones de composables */
import useImage from "@/composables/useImage.js";
import useLocationMap from "@/composables/useLocationMap";

/* Importaciones de helpers */
import { limitCharacters } from "@/helpers";

// Usamos el composable para el manejo de im√°genes y extraemos las propiedades necesarias
const { url, onFileChange, isImageUploaded, spinner } = useImage();
const { center, zoom, pin, getUserLocation } = useLocationMap();
// Usamos el store de items
const items = useItemsStore();

// Inicializamos hooks de Vue Router
const router = useRouter();
const route = useRoute();

// Consultamos la base de datos usando Firestore y vuefire
const db = useFirestore(); // Obtenemos una referencia a Firestore
const docRef = doc(db, "items", route.params.id); // Creamos una referencia a un documento espec√≠fico en la colecci√≥n "items", usando el ID de la ruta actual
const item = useDocument(docRef); // Usamos el hook de vuefire para obtener el documento y mantenerlo sincronizado

// Definimos los datos del formulario de manera reactiva
const formData = reactive({
  map: "",
  name: "",
  email: "",
  phone: "",
  description: "",
  location: "",
  date: "",
  image: "",
  observations: "",
});

// Estado para verificar si los datos est√°n listos
const isDataReady = ref(false);

// Observamos cambios en el item y actualizamos formData cuando cambie
watch(item, async (item) => {
  if (!item) {
    // Si el item no existe, redirigimos a la p√°gina de "lost-items"
    router.push({ name: "lost-items" });
  } else {
    Object.assign(formData, item); // Actualizamos formData con los datos del item
    center.value = [item.map[0], item.map[1]];
    isDataReady.value = true;
    await nextTick(); // Aseguramos que Vue actualiza el DOM
  }
});
// Funci√≥n para manejar el env√≠o del formulario
const handleSubmit = async (data) => {
  try {
    // Actualizamos el documento en Firestore con los nuevos datos y la URL de la imagen
    const updatedData = {
      ...data,
      map: [center.value[0], center.value[1]],
      url,
    };
    await items.updateItem(docRef, updatedData);
    router.push({ name: "lost-items" }); // Redirigimos a la p√°gina de "lost-items" despu√©s de la actualizaci√≥n
  } catch (error) {
    console.log(error); // Manejamos cualquier error que ocurra durante la actualizaci√≥n
  }
};

// Funci√≥n para manejar la limitaci√≥n de caracteres
const handleLimitCharacters = (field, maxLength) => {
  limitCharacters(formData, field, maxLength);
};
</script>

<template>
  <div class="container">
    <h4 class="header-note">Editar Informaci√≥n del Objeto Encontrado</h4>
    <p>
      Por favor, utiliza el siguiente formulario para actualizar la informaci√≥n
      del objeto que encontraste. Aseg√∫rate de proporcionar detalles precisos,
      como la descripci√≥n del objeto, la ubicaci√≥n donde lo encontraste y
      cualquier otra informaci√≥n relevante. Si es posible, adjunta una foto del
      objeto para ayudar a identificarlo m√°s f√°cilmente. Una vez que hayas
      completado los cambios, haz clic en "Enviar" para guardar la informaci√≥n
      actualizada.
    </p>
    <!-- Enlace para volver a la lista de objetos perdidos -->
    <Link to="lost-items">Volver a Objetos Perdidos</Link>
    <!-- Formulario -->
    <div class="form">
      <!-- Campos de Geolocalizaci√≥n -->
      <div class="geolocation-container">
        <button class="geolocation-button" @click="getUserLocation">
          Obtener Ubicaci√≥n
        </button>
        <p class="pin">o despl√°zate con el pin</p>
      </div>
      <!-- Campos del formulario -->
      <FormKit
        type="form"
        :value="formData"
        submit-label="Guardar Cambios"
        incomplete-message="No se pudo enviar, revisa los mensajes"
        @submit="handleSubmit"
        :actions="false"
      >
        <!-- Campos del mapa -->
        <div class="map-container">
          <LMap
            v-if="isDataReady"
            ref="map"
            v-model:zoom="zoom"
            :center="center"
            :use-global-leaflet="false"
          >
            <LMarker :lat-lng="center" draggable @moveend="pin" />
            <LTileLayer
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            ></LTileLayer>
          </LMap>
        </div>
        <FormKit
          type="date"
          name="date"
          label="Fecha en la que se encontr√≥"
          validation="required"
          validation-visibility="live"
          format="DD MM YY"
          v-model.trim="formData.date"
        />
        <!-- Secci√≥n de imagen y spinner -->
        <div v-if="spinner" class="spinner">
          <SpinnerDog />
        </div>
        <div v-else-if="isImageUploaded" class="image-container">
          <p class="image">Imagen Nueva:</p>
          <img :src="url" alt="Nueva imagen Producto" class="image" />
        </div>
        <div v-else class="image-container">
          <p class="image">Imagen Actual:</p>
          <img
            :src="formData.image"
            :alt="'Imagen de ' + formData.image"
            class="image"
          />
        </div>
        <!-- Campo para cambiar la imagen -->
        <FormKit
          type="file"
          label="Cambiar Imagen"
          name="image"
          multiple="false"
          accept=".jpg"
          @change="onFileChange"
        />
        <FormKit
          type="text"
          label="Nombre"
          name="name"
          placeholder="Nombre"
          validation="required"
          :validation-messages="{
            required: 'El Nombre es Obligatorio',
          }"
          v-model.trim="formData.name"
        />
        <FormKit
          type="email"
          label="Email"
          name="email"
          placeholder="Email"
          validation="required"
          :validation-messages="{
            required: 'El email es Obligatorio',
          }"
          v-model.trim="formData.email"
        />
        <FormKit
          type="tel"
          label="Tel√©fono"
          name="phone"
          placeholder="N√∫mero de tel√©fono"
          validation="required"
          :validation-messages="{
            required: 'El Tel√©fono es Obligatorio',
          }"
          v-model.trim="formData.phone"
        />
        <FormKit
          type="textarea"
          label="Descripci√≥n del objeto encontrado"
          name="description"
          placeholder="Breve descripci√≥n del objeto encontrado"
          :help="`${formData.description.length} / 120`"
          validation="required | length:0,120"
          :validation-messages="{
            required: 'La descripci√≥n es obligatoria',
            length: 'La descripci√≥n no puede tener m√°s de 120 caracteres.',
          }"
          validation-visibility="blur"
          v-model.trim="formData.description"
          @input="handleLimitCharacters('description', 120)"
        />

        <FormKit
          type="textarea"
          label="Observaciones adicionales"
          name="observations"
          placeholder="Observaciones adicionales"
          :help="`${formData.observations.length} / 120`"
          validation="required | length:0,120"
          :validation-messages="{
            required: 'Las observaciones son obligatorias',
            length: 'La descripci√≥n no puede tener m√°s de 120 caracteres',
          }"
          v-model.trim="formData.observations"
        />
        <!-- Bot√≥n de submit -->
        <FormKit type="submit">Guardar Cambios</FormKit>
      </FormKit>
    </div>
  </div>
</template>

<style scoped>
/* Estilo para el spinner */
.spinner {
  display: flex;
  justify-content: space-around;
  margin-top: 6rem;
}
/* Contenedor Mapa */
.map-container {
  height: 30rem;
  margin-bottom: 1rem;
}
/* Contenedor para las im√°genes */
.image-container {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
}

/* Estilo de las im√°genes */
.image {
  font-weight: bold;
  max-width: 20rem;
  max-height: 20rem;
}
/* Nota de agradecimiento */
.gratitude-note {
  text-align: center;
}

/* Estilo del formulario */
.form {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 50vh;
  flex-direction: column;
}

.form > * {
  max-width: 40rem;
  width: 100%;
  margin: 0 auto;
  margin-bottom: 1rem;
}
/* Estilos para geolocalizaci√≥n */
.geolocation-container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 1rem;
  gap: 1rem;
}
.geolocation-button {
  background-color: #fff;
  display: block;
  font-weight: 600;
  color: var(--text-100);
  text-decoration: underline;
}
.geolocation-button:hover {
  display: block;
  font-weight: 900;
  color: var(--text-200);
}
.pin {
  display: block;
}
</style>



--- File: views\Items\FoundItemCardView.vue ---

<!-- FoundItemCardView OK -->
<script setup>
/* Importaciones de bibliotecas externas */
import { RouterLink } from "vue-router";
import { ref, computed } from "vue";
import "leaflet/dist/leaflet.css";
import { LMap, LTileLayer, LMarker } from "@vue-leaflet/vue-leaflet";

/* Importaciones de componentes locales */
import EditIcon from "../../assets/icons/EditIcon.vue";
import DeleteIcon from "../../assets/icons/DeleteIcon.vue";

/* Importaciones de stores */
import { useItemsStore } from "@/stores/itemsStore";
import { useAuthStore } from "@/stores/authStore";

/* Importaciones de composable */
import useLocationMap from "@/composables/useLocationMap";

/* Definici√≥n de propiedades (props) */
const props = defineProps({
  item: {
    type: Object,
    required: true,
  },
});

/* Usamos el store de items */
const items = useItemsStore();
const authStore = useAuthStore();

const { zoom, pin } = useLocationMap();

/* Propiedad computada para verificar si el usuario actual es el propietario del objeto */
const isOwner = computed(() => props.item.userId === authStore.userData?.uid);

/* Estado reactivo para controlar la visibilidad de la informaci√≥n de contacto */
const showContactInfo = ref(false);

/* Funci√≥n para alternar la visibilidad de la informaci√≥n de contacto */
const toggleContactInfo = () => {
  showContactInfo.value = !showContactInfo.value;
};

/* Propiedad computada para cambiar din√°micamente el texto del bot√≥n */
const buttonText = computed(() =>
  showContactInfo.value ? "Cerrar Contacto" : "Reclamar"
);
</script>

<template>
  <div class="card">
    <!-- Contenedor de la imagen del objeto -->
    <div class="card-image-container">
      <img :src="item.image" alt="Imagen del objeto perdido" class="card-img" />
    </div>
    <!-- Contenido de la tarjeta -->
    <div class="card-content">
      <div class="card-content-inner">
        <h2 class="card-title">{{ item.name }}</h2>

        <div class="card-details">
          <div class="map-container">
            <LMap
              ref="map"
              v-model:zoom="zoom"
              :center="[item.map[0], item.map[1]]"
              :use-global-leaflet="false"
            >
              <LMarker
                :lat-lng="[item.map[0], item.map[1]]"
                draggable
                @moveend="pin"
              />
              <LTileLayer
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
              ></LTileLayer>
            </LMap>
          </div>
          <p class="card-description">{{ item.description }}</p>
          <p class="card-text"><span>Fecha:</span> {{ item.date }}</p>
          <p class="card-text"><span>Tel√©fono:</span> {{ item.phone }}</p>
          <p class="card-text"><span>Email:</span> {{ item.email }}</p>
          <p class="card-text-content">
            <span>Observaciones: </span> {{ item.observations }}
          </p>

          <div class="card-header" v-if="isOwner">
            <div class="button-container">
              <router-link
                :to="{ name: 'edit-item-found', params: { id: item.id } }"
              >
                <EditIcon />
              </router-link>
            </div>
            <div class="button-container">
              <button type="button" @click="items.deleteItem(item.id)">
                <DeleteIcon />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
/* Contenedor Mapa */
.map-container {
  height: 20rem;
  margin: 3rem 0 1rem;
}

p {
  font-size: 1rem;
  color: white;
  margin-bottom: 1rem;
  margin: 0;
}

/* Estilos generales de la tarjeta */
.card {
  position: relative;
  width: 100vw;
  max-width: 25rem;
  height: 50rem;
  overflow: hidden;
  border-radius: 0.625rem;
  box-shadow: 0.25rem 0.25rem 0.5rem rgba(0, 0, 0, 0.25);
  transition: box-shadow 0.3s ease;
  margin: 1rem auto;
  display: flex;
  flex-direction: column;
}

.card-image-container {
  width: 100%;
  height: 66%;
  overflow: hidden;
}

.card-img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.card-content {
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 30%; /* Ajuste del alto del contenido visible */

  color: #fff;
  padding: 1rem;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  transform: translateY(0);
}

.card:hover {
  transform: scale(1.05);
  transition: transform 500ms ease-in;
}
.card-content {
  height: 100%; /* Ocupa el 100% de la tarjeta al hacer hover */
  background: linear-gradient(
    180deg,
    hsla(0, 0%, 0%, 0.05) 0%,
    hsla(0, 0%, 0%, 0.5) 70%,
    hsl(0, 0%, 0%, 0.8) 100%
  );
}

.card-content-inner {
  opacity: 1;
}

.card-title {
  font-weight: bold;
  font-size: 2.25rem;
  margin-bottom: 0.5rem;
  position: absolute;
}

.card-description {
  margin-bottom: 1rem;
}

.card-details {
  display: none;
  flex-direction: column;
  transition: opacity 0.3s ease;
}
.card-details span {
  font-weight: 700;
  text-decoration: underline;
  color: var(--accent-100);
}

.card:hover .card-details {
  display: flex;
}

.card-text {
  margin: 0.5rem 0;
}

.card-text-content {
  max-height: 8rem;
  overflow-y: auto;
}

.card-header {
  display: flex;
  justify-content: space-between;
  margin-top: 1rem;
}

/* Estilos del bot√≥n de reclamar/cerrar contacto */
.claim-button {
  padding: 0.5rem 1rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  background-color: #f8f8f8;
  cursor: pointer;
  transition: background-color 0.3s;
}

.claim-button:hover {
  background-color: #e0e0e0;
}

/* Bot√≥n sin estilos espec√≠ficos */
button {
  border: none;
  background: none;
  cursor: pointer;
}
button:hover {
  border: none;
  background: none;
  cursor: pointer;
}
</style>



--- File: views\Items\LostAndFoundView.vue ---

<!-- LostAndFoundView OK -->
<script setup>
import Link from "@/components/Link.vue";
import FoundItemCard from "./FoundItemCardView.vue";
import { useItemsStore } from "@/stores/itemsStore.js";

const items = useItemsStore();
</script>

<template>
  <div class="lost-and-found">
    <h2 class="section-title">Objetos Perdidos</h2>
    <section class="introduction">
      <h3 class="subsection-title">
        Bienvenido a la Secci√≥n de Objetos Perdidos y Encontrados
      </h3>
      <p class="intro-text">
        Si has extraviado alg√∫n objeto o has encontrado uno, ¬°no te preocupes!
        Estamos aqu√≠ para ayudarte. A continuaci√≥n, puedes encontrar una lista
        de los objetos que han sido encontrados y reportados. Si alguno de ellos
        te pertenece, sigue las instrucciones para reclamarlo. Tambi√©n puedes
        reportar cualquier objeto que hayas encontrado para ayudar a que llegue
        a su due√±o.
      </p>
      <h4 class="how-it-works-title">¬øC√≥mo Funciona?</h4>
      <section class="lost-steps">
        <h5 class="steps-title">Si has Perdido un Objeto:</h5>
        <ol class="steps-list">
          <li class="step-item">
            <span class="step-highlight">Busca tu Objeto:</span> Navega a trav√©s
            de la lista de objetos perdidos que se actualiza regularmente.
          </li>
          <li class="step-item">
            <span class="step-highlight">Reclama tu Objeto:</span> Si encuentras tu objeto, ponte en contacto con la persona que lo encontr√≥ haciendo clic en el bot√≥n de "Reclamar" y demuestra que es tuyo. Ten en cuenta que la persona que subi√≥ el objeto encontrado ser√° responsable de eliminar el anuncio una vez que se encuentre el due√±o. Si no se elimina, el anuncio ser√° borrado autom√°ticamente en el plazo de 7 d√≠as.
          </li>
          <li class="step-item">
            <span class="step-highlight">Entrega:</span> Una vez verificada la
            propiedad, ser√°n las personas quienes se coordinen para reunirse y
            entregar el objeto.
          </li>
        </ol>
      </section>
      <section class="found-steps">
        <h5 class="steps-title">Si has Encontrado un Objeto:</h5>
        <ol class="steps-list">
          <li class="step-item">
            <span class="step-highlight">Reporta el Objeto:</span> Haz clic en
            el bot√≥n de "Reportar Objeto Encontrado" y completa el formulario
            con la informaci√≥n del objeto que has encontrado, incluyendo una
            descripci√≥n detallada y la ubicaci√≥n donde fue encontrado.
          </li>
          <li class="step-item">
            <span class="step-highlight">Mant√©n el Anuncio:</span> La persona que subi√≥ el objeto encontrado ser√° responsable de eliminar el anuncio una vez que se encuentre el due√±o. Si no se elimina, el anuncio ser√° borrado autom√°ticamente en el plazo de 7 d√≠as.
          </li>
        </ol>
        <div class="report-link-container">
          <Link to="found-items" class="report-link">
            Reportar Objeto
          </Link>
        </div>
      </section>
    </section>
    <p v-if="items.noResults">No han reportado ning√∫n art√≠culo</p>
    <div v-else>
      <h3 class="list-title">Lista de Objetos Perdidos</h3>
      <div class="found-items">
        <ul class="items-list">
          <FoundItemCard 
            v-for="item in items.itemsCollection"
            :key="item.id"
            :item="item"
            class="item"
          />
        </ul>
      </div>
    </div>
  </div>
</template>

<style scoped>
/* Estilos generales */
.lost-and-found {
  padding: 1rem;
}

.section-title,
.subsection-title,
.how-it-works-title,
.steps-title,
.list-title {
  text-align: center;
  margin-bottom: 1rem;
}

.intro-text,
.step-item {
  font-size: 16px;
  line-height: 1.5;
  margin-bottom: 20px;
}

.steps-list {
  list-style: none;
  padding: 0;
}

.step-highlight {
  font-weight: bold;
  color: var(--accent-200);
}

/* Estilos para la secci√≥n de objetos encontrados */
.found-items {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 1rem;
}

.items-list {
  list-style: none;
  padding: 0;
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
}

.report-link-container {
  display: flex;
  justify-content: center;
  margin: 1rem 0;
}
</style>



--- File: views\Items\ReportFoundItemView.vue ---

<!-- ReportFoundItemView OK -->
<script setup>
/* Importaciones de bibliotecas externas */
import { reactive, watch } from "vue";
import { useRouter } from "vue-router";
import "leaflet/dist/leaflet.css";
import { LMap, LTileLayer, LMarker } from "@vue-leaflet/vue-leaflet";

/* Importaciones de componentes locales */
import Link from "@/components/Link.vue";
import SpinnerDog from "@/components/SpinnerDog.vue";

/* Importaciones de stores */
import { useItemsStore } from "@/stores/itemsStore.js";
import { useAuthStore } from "@/stores/authStore";

/* Importaciones de composables */
import useImage from "@/composables/useImage";
import useLocationMap from "@/composables/useLocationMap";
/* Importaciones de helpers */
import { limitCharacters } from "@/helpers";

// Usamos el composable para el manejo de im√°genes y extraemos las propiedades necesarias
const { url, onFileChange, isImageUploaded, spinner } =
  useImage("lostItems_images");
const { center, zoom, pin, getUserLocation } = useLocationMap();

// Usamos el store de items y de auth
const items = useItemsStore();
const authStore = useAuthStore();
// Inicializamos hooks de Vue Router
const router = useRouter();

// Definimos los datos del formulario de manera reactiva
const formData = reactive({
  map: "",
  image: "",
  date: "",
  name: "",
  email: "",
  phone: "",
  description: "",
  observations: "",
});

// Funci√≥n para manejar el env√≠o del formulario
const handleSubmit = async (data) => {
  const { image, map, ...values } = data;

  try {
    // Creamos un nuevo item usando el store
    await items.createItem({
      ...values,
      userId: authStore.userData.uid, // Incorporamos userId con el UID del usuario autenticado
      image: url.value, // Usamos la URL de la imagen subida
      map: center.value,
    });
    // Redirigimos a la p√°gina de "lost-items" despu√©s de la creaci√≥n
    router.push({ name: "lost-items" });
  } catch (error) {
    console.log(error); // Manejamos cualquier error que ocurra durante la creaci√≥n
  }
};

// Funci√≥n para manejar la limitaci√≥n de caracteres
const handleLimitCharacters = (field, maxLength) => {
  limitCharacters(formData, field, maxLength);
};
</script>

<template>
  <div class="container">
    <h4 class="gratitude-note">
      ¬°Gracias por tu ayuda en la recuperaci√≥n de objetos perdidos!
    </h4>
    <p>
      Si has encontrado alg√∫n objeto perdido en el pipican y deseas reportarlo
      para que el propietario pueda recuperarlo, por favor sigue estos pasos:<br />
      Completa el siguiente formulario con la informaci√≥n requerida sobre el
      objeto que encontraste. Aseg√∫rate de proporcionar detalles precisos, como
      la descripci√≥n del objeto, la ubicaci√≥n donde lo encontraste y cualquier
      otra informaci√≥n relevante. Si es posible, adjunta una foto del objeto
      para ayudar a identificarlo m√°s f√°cilmente. Una vez enviado, nuestro
      equipo revisar√° la informaci√≥n y la agregar√° a la secci√≥n de "Objetos
      Encontrados" para que los propietarios puedan buscar y reclamar sus
      pertenencias perdidas. Gracias por tu colaboraci√≥n en la recuperaci√≥n y
      devoluci√≥n de objetos perdidos.
    </p>
    <!-- Enlace para volver a la lista de objetos perdidos -->
    <Link to="lost-items">Volver a Objetos Perdidos</Link>
    <p class="gratitude-note">
      Tu ayuda es fundamental para mantener nuestro pipican un lugar seguro y
      acogedor para todos.
    </p>
    <!-- Formulario -->
    <div class="form">
      <FormKit type="form" submit-label="Enviar" @submit="handleSubmit">
        <!-- Campos del formulario -->
        <!-- Campos de Geolocalizaci√≥n -->
        <div class="geolocation-container">
          <button class="geolocation-button" @click="getUserLocation">
            Obtener Ubicaci√≥n
          </button>
          <p class="pin">o despl√°zate con el pin</p>
        </div>
        <div class="map-container">
          <LMap
            ref="map"
            v-model:zoom="zoom"
            :center="center"
            :use-global-leaflet="false"
          >
            <LMarker :lat-lng="center" draggable @moveend="pin" />
            <LTileLayer
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            ></LTileLayer>
          </LMap>
        </div>
        <!-- Imagen -->
        <FormKit
          type="file"
          label="A√±ade una imagen del objeto y espera a que se cargue"
          name="image"
          placeholder="Imagen"
          validation="required"
          :validation-messages="{
            required: 'La imagen es obligatoria',
          }"
          @change="onFileChange"
          v-model.trim="formData.image"
        />
        <!-- Spinner y previsualizaci√≥n de la imagen -->
        <div v-if="spinner" class="spinner">
          <SpinnerDog />
        </div>
        <div v-else-if="isImageUploaded" class="image-container">
          <img :src="url" alt="Nueva imagen producto" class="image" />
        </div>
        <FormKit
          type="date"
          name="date"
          label="Fecha en la que se encontr√≥"
          validation="blur | required"
          validation-visibility="live"
          format="DD MM YY"
          v-model.trim="formData.date"
          :validation-messages="{
            required: 'La fecha en la que se encontr√≥ es requerida',
          }"
        />
        <FormKit
          type="text"
          label="Nombre"
          name="name"
          placeholder="Nombre"
          validation="required"
          :validation-messages="{
            required: 'El Nombre es Obligatorio',
          }"
          v-model.trim="formData.name"
        />
        <FormKit
          type="email"
          label="Email"
          name="email"
          placeholder="Email"
          validation="required"
          :validation-messages="{
            required: 'El email es Obligatorio',
          }"
          v-model.trim="formData.email"
        />
        <FormKit
          type="tel"
          label="Tel√©fono"
          name="phone"
          placeholder="N√∫mero de tel√©fono"
          validation="required"
          :validation-messages="{
            required: 'El Tel√©fono es Obligatorio',
          }"
          v-model.trim="formData.phone"
        />
        <FormKit
          type="textarea"
          label="Descripci√≥n del objeto encontrado"
          name="description"
          placeholder="Breve descripci√≥n del objeto encontrado"
          :help="`${formData.description.length} / 120`"
          validation="required | length:0,120"
          :validation-messages="{
            required: 'La descripci√≥n es obligatoria',
            length: 'La descripci√≥n no puede tener m√°s de 120 caracteres.',
          }"
          validation-visibility="blur"
          v-model.trim="formData.description"
          @input="handleLimitCharacters('description', 120)"
        />
        <FormKit
          type="textarea"
          label="Observaciones adicionales"
          name="observations"
          placeholder="Observaciones adicionales"
          :help="`${formData.observations.length} / 120`"
          validation="length:0,120"
          :validation-messages="{
            length: 'La descripci√≥n no puede tener m√°s de 120 caracteres',
          }"
          validation-visibility="blur"
          v-model.number="formData.observations"
          @input="handleLimitCharacters('observations', 120)"
        />
      </FormKit>
    </div>
  </div>
</template>

<style scoped>
/* Estilo para el spinner */
.spinner {
  display: flex;
  justify-content: space-around;
  margin-top: 6rem;
}

/* Nota de agradecimiento */
.gratitude-note {
  text-align: center;
}

/* Estilo del formulario */
.form {
  display: flex;
  justify-content: center; /* Centrar horizontalmente */
  align-items: center; /* Centrar verticalmente */
  min-height: 50vh; /* Altura m√≠nima para centrar verticalmente */
}

.form > * {
  max-width: 40rem; /* Ancho m√°ximo del formulario */
  width: 100%; /* Hace que el formulario ocupe todo el ancho disponible */
  margin: 0 auto;
  margin-bottom: 1rem; /* Espaciado entre elementos del formulario */
}

/* Estilos para geolocalizaci√≥n */
.geolocation-container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 1rem;
  gap: 1rem;
}
.geolocation-button {
  display: block;
  font-weight: 600;
  color: var(--text-100);
  text-decoration: underline;
}
.geolocation-button:hover {
  display: block;
  font-weight: 900;
  color: var(--text-200);
}
.pin {
  display: block;
}

/* Contenedor Mapa */
.map-container {
  height: 30rem;
  margin-bottom: 2rem;
}
/* Contenedor para la imagen */
.image-container {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  margin-bottom: 1rem;
}

/* Estilo de la imagen */
.image {
  max-width: 20rem; /* Ajusta el ancho de la imagen */
  height: auto; /* Mantiene la proporci√≥n de la imagen */
  max-height: 20rem; /* Limita la altura m√°xima de la imagen */
}
</style>



--- File: views\LoginView.vue ---

<script setup>
import { ref} from "vue";
import { RouterLink } from "vue-router";
import { useAuthStore } from "@/stores/authStore";

const authStore = useAuthStore();
const { login } = authStore;
const email = ref("");
const password = ref("");


const submitForm = async () => {
  await login(email.value, password.value);
};
</script>

<template>
  <div class="container">
    <p class="wellcome-message">
      ¬°Bienvenido de nuevo! Estamos encantados de verte de vuelta. Por favor,
      inicia sesi√≥n para acceder a tu cuenta y disfrutar de todas las
      caracter√≠sticas y beneficios que tenemos preparados para ti.
    </p>
    <div class="login-form">
      <form @submit.prevent="submitForm">
        <div class="form-group">
          <label for="email">Correo electr√≥nico:</label>
          <input type="email" v-model.trim="email" required />
        </div>
        <div class="form-group">
          <label for="password">Contrase√±a:</label>
          <input type="password" v-model.trim="password" required />
        </div>
        <button type="submit" class="buttons">Iniciar sesi√≥n</button>
      </form>
    </div>
    <div class="register-container">
      <p class="register-message">¬øEres nuevo en CanineConnect?</p>
      <router-link :to="{ name: 'register' }" class="register-button">
        Crea tu cuenta de CanineConnect
      </router-link>
    </div>
  </div>
</template>

<style scoped>
.container {
  padding: 0 1rem;
}
@media (min-width: 640px) {
  .container {
    max-width: 120rem;
    margin: 0 auto;
  }
}
.wellcome-message {
  text-align: justify;
  margin-top: 1rem;
}
.login-form,
.register-container {
  max-width: 400px;
  margin: 4rem auto;
}

.form-group {
  margin-bottom: 1rem;
}
.register-message {
  text-align: center;
}

label {
  display: block;
  margin-bottom: 0.5rem;
}

input[type="email"],
input[type="password"] {
  width: 100%;
  padding: 1rem;
  border: 1px solid #ccc;
  border-radius: 3px;
}
p {
  margin: 0;
}
.buttons {
  background-color: #007bff;
  color: white;
  padding: 1rem;
  border: none;
  border-radius: 3px;
  cursor: pointer;
  width: 100%;
}

.buttons:hover {
  background-color: #0056b3;
}
.register-button {
  display: block;
  text-align: center;
  text-decoration: none;
  color: #007bff;
  padding: 1rem;
  border: none;
  border-radius: 3px;
  cursor: pointer;
  width: 100%;
}
.register-button:hover {
  display: block;
  text-align: center;
  text-decoration: underline;
  color: #007bff;
  cursor: pointer;
  width: 100%;
}
</style>



--- File: views\LostDogs\EditFoundDogView.vue ---

<!-- EditFoundDogView ok -->
<script setup>
/* Importaciones de bibliotecas externas */
import { reactive, watch, ref, nextTick } from "vue";
import { useRouter, useRoute } from "vue-router";
import { useDocument, useFirestore } from "vuefire";
import { doc } from "firebase/firestore";
import "leaflet/dist/leaflet.css";
import { LMap, LTileLayer, LMarker } from "@vue-leaflet/vue-leaflet";

/* Importaciones de componentes locales */
import Link from "@/components/Link.vue";
import SpinnerDog from "@/components/SpinnerDog.vue";

/* Importaciones de stores */
import { useLostDogsStore } from "@/stores/lostDogsStore";

/* Importaciones de composables */
import useImage from "@/composables/useImage";
import useLocationMap from "@/composables/useLocationMap";

/* Importaciones de helpers */
import { limitCharacters } from "@/helpers";

// Usamos los composables para el manejo de im√°genes y extraemos las propiedades necesarias
const { url, onFileChange, isImageUploaded, spinner } =
  useImage("lostDogs_images");
const { center, zoom, pin, getUserLocation } = useLocationMap();
// Usamos el store de perros perdidos
const lostDogsStore = useLostDogsStore();

// Inicializamos hooks de Vue Router
const router = useRouter();
const route = useRoute();

// Consultamos la base de datos usando Firestore y vuefire
const db = useFirestore(); // Obtenemos una referencia a Firestore
const docRef = doc(db, "lostDogs", route.params.id); // Creamos una referencia a un documento espec√≠fico en la colecci√≥n "lostDogs", usando el ID de la ruta actual
const dog = useDocument(docRef); // Usamos el hook de vuefire para obtener el documento y mantenerlo sincronizado

// Definimos los datos del formulario de manera reactiva
const formData = reactive({
  image: "",
  name: "",
  phone: "",
  email: "",
  observations: "",
  date: "",
  location: "",
});

// Estado para verificar si los datos est√°n listos
const isDataReady = ref(false);

// Observamos cambios en el dog y actualizamos formData cuando cambie
watch(dog, async (dog) => {
  if (!dog) {
    // Si el dog no existe, redirigimos a la p√°gina de "lost-dogs"
    router.push({ name: "lost-dogs" });
  } else {
    Object.assign(formData, dog); // Actualizamos formData con los datos del dog
    center.value = [dog.map[0], dog.map[1]];
    isDataReady.value = true;
    await nextTick(); // Aseguramos que Vue actualiza el DOM
  }
});

// Funci√≥n para manejar el env√≠o del formulario
const handleSubmit = async (data) => {
  try {
    // Actualizamos el documento en Firestore con los nuevos datos y la URL de la imagen
    const updatedData = {
      ...data,
      map: [center.value[0], center.value[1]],
      url,
    };
    await lostDogsStore.updateLostDog(docRef, updatedData); // Actualizamos el documento en Firestore con los nuevos datos y la URL de la imagen
    router.push({ name: "lost-dogs" }); // Redirigimos a la p√°gina de "lost-dogs" despu√©s de la actualizaci√≥n
  } catch (error) {
    console.log(error); // Manejamos cualquier error que ocurra durante la actualizaci√≥n
  }
};

// Funci√≥n para manejar la limitaci√≥n de caracteres
const handleLimitCharacters = (field, maxLength) => {
  limitCharacters(formData, field, maxLength);
};
</script>

<template>
  <div class="container">
    <h4 class="header-note">Editar Informaci√≥n de la Mascota Encontrada</h4>
    <p>
      Por favor, utiliza el siguiente formulario para actualizar la informaci√≥n
      de la mascota que encontraste. Aseg√∫rate de proporcionar detalles
      precisos, la ubicaci√≥n donde lo encontraste y cualquier otra informaci√≥n
      relevante. Una vez que hayas completado los cambios, haz clic en "Enviar"
      para guardar la informaci√≥n actualizada.
    </p>
    <!-- Enlace para volver a la lista de objetos perdidos -->
    <Link to="lost-dogs">Volver a Se Busca</Link>
    <p class="gratitude-note">
      ¬°Tu ayuda es fundamental para reunificaci√≥n de mascotas perdidas!
    </p>
    <!-- Campos de Geolocalizaci√≥n -->
    <div class="geolocation-container">
      <button class="geolocation-button" @click="getUserLocation">
        Obtener Ubicaci√≥n
      </button>
      <p class="pin">o despl√°zate con el pin</p>
    </div>
    <!-- Formulario -->
    <div class="form">
      <FormKit type="form" submit-label="Enviar" @submit="handleSubmit">
        <!-- Campos del mapa -->
        <div class="map-container">
          <LMap
            v-if="isDataReady"
            ref="map"
            v-model:zoom="zoom"
            :center="center"
            :use-global-leaflet="false"
          >
            <LMarker :lat-lng="center" draggable @moveend="pin" />
            <LTileLayer
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            ></LTileLayer>
          </LMap>
        </div>
        <!--Secci√≥n Fecha-->
        <FormKit
          class="message-input"
          type="date"
          label="Fecha del hallazgo"
          name="date"
          format="DD MM YY"
          placeholder="Fecha en que se encontr√≥ la mascota"
          validation="required"
          :validation-messages="{
            required: 'La fecha es obligatoria',
          }"
          v-model.trim="formData.date"
        />
        <!-- Secci√≥n de imagen y spinner -->
        <div v-if="spinner" class="spinner">
          <SpinnerDog />
        </div>
        <div v-else-if="isImageUploaded" class="image-container">
          <p class="image">Imagen Nueva:</p>
          <img :src="url" alt="Nueva imagen Producto" class="image" />
        </div>
        <div v-else class="image-container">
          <p class="image">Imagen Actual:</p>
          <img
            :src="formData.image"
            :alt="'Imagen de ' + formData.image"
            class="image"
          />
        </div>
        <!-- Campo para cambiar la imagen -->
        <FormKit
          type="file"
          label="Cambiar Imagen"
          name="image"
          multiple="false"
          accept=".jpg"
          @change="onFileChange"
        />

        <FormKit
          type="text"
          label="Nombre"
          name="name"
          placeholder="Nombre"
          validation="required"
          :validation-messages="{
            required: 'El nombre es Obligatorio',
          }"
          v-model.trim="formData.name"
        />
        <!-- Campo para el nombre del perro -->
        <FormKit
          type="text"
          label="Nombre del perro"
          name="dogName"
          placeholder="Nombre del perro"
          validation="required"
          :validation-messages="{
            required: 'El nombre es Obligatorio',
          }"
          v-model.trim="formData.dogName"
        />
        <FormKit
          type="tel"
          label="Tel√©fono"
          name="phone"
          placeholder="N√∫mero de tel√©fono"
          validation="required"
          :validation-messages="{
            required: 'El Tel√©fono es Obligatorio',
          }"
          v-model.trim="formData.phone"
        />
        <FormKit
          type="email"
          label="Email"
          name="email"
          placeholder="Direcci√≥n de email"
          validation="required"
          :validation-messages="{
            required: 'El email es Obligatorio',
          }"
          v-model.trim="formData.email"
        />
        <FormKit
          type="textarea"
          label="Ubicaci√≥n y detalles"
          name="observations"
          placeholder="D√≥nde se encontr√≥ y cualquier detalle relevante"
          :help="`${formData.observations.length} / 200`"
          validation="required | length:0,200"
          :validation-messages="{
            required: 'La ubicaci√≥n es obligatoria',
            length: 'La ubicaci√≥n no puede tener m√°s de 200 caracteres.',
          }"
          validation-visibility="blur"
          v-model="formData.observations"
          @input="handleLimitCharacters('observations', 200)"
        />
      </FormKit>
    </div>
  </div>
</template>

<style scoped>
/* Estilos para geolocalizaci√≥n */
.geolocation-container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 1rem;
  gap: 1rem;
}
.geolocation-button {
  background-color: #fff;
  display: block;
  font-weight: 600;
  color: var(--text-100);
  text-decoration: underline;
}
.geolocation-button:hover {
  display: block;
  font-weight: 900;
  color: var(--text-200);
}
.pin {
  display: block;
}
/* Contenedor Mapa */
.map-container {
  height: 30rem;
  margin-bottom: 1rem;
}
/* Nota de agradecimiento */
.gratitude-note {
  text-align: center;
}

/* Estilo del formulario */
.form {
  display: flex;
  justify-content: center;
  margin-top: 2rem;
  align-items: center;
  min-height: 50vh;
}

.form > * {
  max-width: 40rem;
  width: 100%; /* Hace que el formulario ocupe todo el ancho disponible */
  margin: 0 auto;
  margin-bottom: 1rem; /* Espaciado entre elementos del formulario */
}

/* Estilo para el spinner */
.spinner {
  display: flex;
  justify-content: space-around;
  margin-top: 6rem;
}

/* Contenedor para la imagen */
.image-container {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
}

/* Estilo de la imagen */
.image {
  max-width: 20rem; /* Ajusta el ancho de la imagen */
  height: auto; /* Mantiene la proporci√≥n de la imagen */
  max-height: 20rem; /* Limita la altura m√°xima de la imagen */
}
</style>



--- File: views\LostDogs\FoundDogCardView.vue ---

<!-- FoundDogCardView ok -->
<script setup>
/* Importaciones de bibliotecas externas */
import { computed, ref } from "vue";
import { RouterLink } from "vue-router";
import "leaflet/dist/leaflet.css";
import { LMap, LTileLayer, LMarker } from "@vue-leaflet/vue-leaflet";

/* Importaciones de componentes locales */
import EditIcon from "../../assets/icons/EditIcon.vue";
import DeleteIcon from "../../assets/icons/DeleteIcon.vue";

/* Importaciones de stores */
import { useLostDogsStore } from "@/stores/lostDogsStore";
import { useAuthStore } from "@/stores/authStore";

/* Importaciones de composable */
import useLocationMap from "@/composables/useLocationMap";

// Definir las propiedades esperadas para el componente
const props = defineProps({
  lostDog: {
    type: Object,
    required: true,
  },
});

// Estado para mostrar o esconder contenido adicional
const showContent = ref(false);
// Inicializar los stores necesarios
const lostDogsStore = useLostDogsStore();
const authStore = useAuthStore();
const { zoom, pin } = useLocationMap();

// Computed property para verificar si el usuario actual es el propietario del perro perdido
const isOwner = computed(() => {
  return props.lostDog.userId === authStore.userData.uid;
});
</script>

<template>
  <article class="card">
    <img
      class="card-background"
      :src="lostDog.image"
      alt="Photo of Cartagena's cathedral at the background and some colonial style houses"
      width="1920"
      height="2193"
    />
    <div class="card-content | flow">
      <div class="card-content-container | flow">
        <h2 class="card-title">{{ lostDog.dogName }}</h2>
        <p class="card-description">
          {{ lostDog.observations }}
        </p>
      </div>

      <div v-if="showContent">
        <!-- Encabezado de la tarjeta con botones de editar y eliminar si el usuario es el propietario -->
        <div class="card-header">
          <div class="map-container">
            <LMap
              ref="map"
              v-model:zoom="zoom"
              :center="[lostDog.map[0], lostDog.map[1]]"
              :use-global-leaflet="false"
            >
              <LMarker
                :lat-lng="[lostDog.map[0], lostDog.map[1]]"
                draggable
                @moveend="pin"
              />
              <LTileLayer
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
              ></LTileLayer>
            </LMap>
          </div>
          <div class="card-details">
            <p><span>Fecha de la desaparici√≥n:</span> {{ lostDog.date }}</p>
            <p><span>Email:</span> {{ lostDog.email }}</p>
            <p><span>Tel√©fono:</span> {{ lostDog.phone }}</p>
          </div>
          <!-- Bot√≥n para editar el perro perdido -->
          <div class="buttons-container" v-if="isOwner">
            <div class="button-container">
              <router-link
                :to="{ name: 'edit-lostDog-found', params: { id: lostDog.id } }"
              >
                <EditIcon />
              </router-link>
            </div>
            <!-- Bot√≥n para eliminar el perro perdido -->
            <div class="button-container">
              <div
                class="custom-icon"
                @click="lostDogsStore.deleteLostDog(lostDog.id)"
                role="button"
                tabindex="0"
              >
                <DeleteIcon />
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- Botones para mostrar/ocultar contenido -->
      <button
        @click="showContent = !showContent"
        v-if="!showContent"
        class="card-button"
        aria-expanded="false"
        aria-controls="additional-content"
      >
        M√°s Informaci√≥n
      </button>
      <button
        @click="showContent = !showContent"
        v-else
        class="card-button"
        aria-expanded="true"
        aria-controls="additional-content"
      >
        Cerrar
      </button>
    </div>
  </article>
</template>

<style scoped>
.map-container {
  height: 15rem;
  margin-bottom: 1rem;
}
/* Estilos espec√≠ficos para el icono de eliminar */
.custom-icon {
  cursor: pointer;
  display: inline-block; /* Para evitar espacios adicionales */
  background-color: transparent; /* Fondo transparente */
}
.buttons-container {
  display: flex;
  justify-content: space-between;
  padding: 2rem 0 0;
}
h2 {
  font-size: 2.25rem;
  color: white;
}

p {
  font-size: 1rem;
  color: white;
  margin-bottom: 1rem;
  margin: 0;
}
.card-description {
  margin: 1rem auto;
}

/* CARD COMPONENT */

.card {
  display: grid;
  place-items: center;
  width: 90vw;
  max-width: 25rem;
  height: 50rem;
  overflow: hidden;
  border-radius: 0.625rem;
  box-shadow: 0.25rem 0.25rem 0.5rem rgba(0, 0, 0, 0.25);
}

.card > * {
  grid-column: 1 / 2;
  grid-row: 1 / 2;
}

.card-background {
  object-fit: cover;
  max-width: 100%;
  height: 100%;
}

.card-content {
  --flow-space: 1rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-self: flex-end;
  height: 100%;
  padding: 15% 1.25rem 10.5rem;
  background: linear-gradient(
    180deg,
    hsla(0, 0%, 0%, 0) 0%,
    hsla(0, 0%, 0%, 0.3) 10%,
    hsl(0, 0%, 0%) 100%
  );
}

.card-content-container {
  --flow-space: 1.25rem;
}

.card-title {
  position: relative;
  width: fit-content;
  width: -moz-fit-content; /* Prefijo necesario para Firefox  */
}
.card-details span {
  font-weight: 700;
  text-decoration: underline;
  color: var(--accent-100);
}
.card-title::after {
  content: "";
  position: absolute;
  height: 0.3125rem;
  width: calc(100% + 1.25rem);
  bottom: calc((1.25rem - 0.5rem) * -1);
  left: -1.25rem;
  background-color: var(--accent-100);
}

.card-button {
  padding: 0.75em 1.6em;
  width: fit-content;
  width: -moz-fit-content;
  font-variant: small-caps;
  font-weight: bold;
  border-radius: 0.45em;
  border: none;
  background-color: var(--accent-100);
  font-size: 1.125rem;
  color: black;
  margin-top: 1rem;
}

.card-button:focus {
  outline: 2px solid black;
  outline-offset: -5px;
}

@media (any-hover: hover) and (any-pointer: fine) {
  .card-content {
    transform: translateY(62%);
    transition: transform 500ms ease-out;
    transition-delay: 500ms;
  }

  .card-title::after {
    opacity: 0;
    transform: scaleX(0);
    transition: opacity 1000ms ease-in, transform 500ms ease-out;
    transition-delay: 500ms;
    transform-origin: right;
  }

  .card-background {
    transition: transform 500ms ease-in;
  }

  .card-content-container > :not(.card-title),
  .card-button {
    opacity: 0;
    transition: transform 500ms ease-out, opacity 500ms ease-out;
  }

  .card:hover,
  .card:focus-within {
    transform: scale(1.05);
    transition: transform 500ms ease-in;
  }

  .card:hover .card-content,
  .card:focus-within .card-content {
    transform: translateY(0);
    transition: transform 500ms ease-in;
  }

  .card:focus-within .card-content {
    transition-duration: 0ms;
  }

  .card:hover .card-background,
  .card:focus-within .card-background {
    transform: scale(1.3);
  }

  .card:hover .card-content-container > :not(.card-title),
  .card:hover .card-button,
  .card:focus-within .card-content-container > :not(.card-title),
  .card:focus-within .card-button {
    opacity: 1;
    transition: opacity 500ms ease-in;
    transition-delay: 1000ms;
  }

  .card:hover .card-title::after,
  .card:focus-within .card-title::after {
    opacity: 1;
    transform: scaleX(1);
    transform-origin: left;
    transition: opacity 500ms ease-in, transform 500ms ease-in;
    transition-delay: 500ms;
  }
}
</style>



--- File: views\LostDogs\LostAndFoundDogsView.vue ---

<!-- LostAndFoundDogsView ok -->
<script setup>
/* Importaciones de componentes locales */
import Link from "@/components/Link.vue";
import FoundDogCardView from "./FoundDogCardView.vue";

/* Importaciones de stores */
import { useLostDogsStore } from "@/stores/lostDogsStore";
import { useAuthStore } from "@/stores/authStore";

const authStore = useAuthStore()

// Inicializar el store de perros perdidos
const lostDogsStore = useLostDogsStore();
</script>

<template>
  <div class="lostDog-container">
    <!-- T√≠tulo de bienvenida -->
    <h2>Bienvenido a la Secci√≥n de Mascota Perdida</h2>
    <!-- Instrucciones para reportar una mascota encontrada -->
    <p>
      Por favor, utiliza este formulario para proporcionar informaci√≥n sobre la mascota que has encontrado o perdido. Completa todos los campos obligatorios para ayudarnos a reunir al animal con su due√±o o facilitar su b√∫squeda. Aseg√∫rate de incluir detalles precisos y una imagen clara de la mascota si es posible.
    </p>
    <!-- Enlace para reportar una mascota encontrada -->
    <div v-if="authStore.isAdmin" class="report-link-container" > <!--Modificar si queremos que no lo ean los usuarios-->
      <Link to="found-dogs" class="report-link">
        Reportar Mascota
      </Link>
    </div>
    <!-- T√≠tulo de la lista de mascotas perdidas -->
    <h3 class="list-title">Lista Mascotas Perdidas</h3>
    <!-- Contenedor de la lista de mascotas perdidas -->
    <div class="found-dog">
      <ul class="dog-list">
        <!-- Iterar sobre la colecci√≥n de perros perdidos y mostrar cada uno en una tarjeta -->
        <FoundDogCardView
          v-for="lostDog in lostDogsStore.lostDogsCollection"
          :key="lostDog.id"
          :lostDog="lostDog"
        />
      </ul>
    </div>
  </div>
</template>

<style scoped>
/* Estilos para los t√≠tulos */
h2, h3 {
  text-align: center;
}

/* Contenedor principal */
.lostDog-container {
  padding: 2rem;
}

/* Estilos para la secci√≥n de objetos encontrados */
.found-dog {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 1rem;
}

/* Estilos para la lista de perros */
.dog-list {
  list-style: none;
  padding: 0;
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap:2rem
}
</style>



--- File: views\LostDogs\ReportDogFoundView.vue ---

<!-- ReportDogFoundView ok -->
<script setup>
/* Importaciones de bibliotecas externas */
import { reactive } from "vue";
import { useRouter } from "vue-router";
import "leaflet/dist/leaflet.css";
import { LMap, LTileLayer, LMarker } from "@vue-leaflet/vue-leaflet";
/* Importaciones de componentes locales */
import Link from "@/components/Link.vue";
import SpinnerDog from "@/components/SpinnerDog.vue";

/* Importaciones de stores */
import { useLostDogsStore } from "@/stores/lostDogsStore";
import { useAuthStore } from "@/stores/authStore.js";

/* Importaciones de composables */
import useImage from "@/composables/useImage";
import useLocationMap from "@/composables/useLocationMap";
// Importaci√≥n de helpers
import { limitCharacters } from '@/helpers';

// Uso del composable useImage para manejar la carga de im√°genes
const { url, onFileChange, isImageUploaded, spinner } = useImage("lostDogs_images");
const { center, zoom, pin, getUserLocation } = useLocationMap();
// Uso de useRouter para la navegaci√≥n program√°tica
const router = useRouter();

// Inicializaci√≥n de los stores
const lostDogsStore = useLostDogsStore();
const authStore = useAuthStore();

// Datos reactivos para el formulario
const formData = reactive({
  image: "",
  name: "",
  dogName:'',
  phone: "",
  email: "",
  observations: "",
  date: "",
});

// Manejo del env√≠o del formulario
const handleSubmit = async (data) => {
  const { image,map, ...values } = data;
  try {
    await lostDogsStore.addLostDog({
      ...values,
      userId: authStore.userData.uid,
      image: url.value,
      map: center.value,
    });
    // Redirecci√≥n a la p√°gina de "lost-dogs"
    router.push({ name: "lost-dogs" });
  } catch (error) {
    console.log(error);
  }
};

// Funci√≥n para limitar los caracteres en los campos de texto
const handleLimitCharacters = (field, maxLength) => {
  limitCharacters(formData, field, maxLength);
};
</script>

<template>
  <!-- Contenedor principal -->
  <div class="container">
    <!-- Nota de gratitud -->
    <h4 class="gratitude-note">
      ¬°Gracias por tu ayuda en la reunificaci√≥n de mascotas perdidas!
    </h4>
    <!-- Instrucciones para el formulario -->
    <p>
      Si has encontrado una mascota y deseas reportarlo para que su due√±o pueda
      recuperarla, por favor sigue estos pasos: Completa el siguiente formulario
      con la informaci√≥n requerida sobre la mascota que encontraste. Aseg√∫rate
      de proporcionar detalles precisos, como la descripci√≥n de la mascota, la
      ubicaci√≥n donde la encontraste y cualquier otra informaci√≥n relevante.
      Adjunta una foto de la mascota para ayudar a identificarla m√°s f√°cilmente.
      Una vez enviada la informaci√≥n se agregar√° a la secci√≥n de "Se Busca" para
      que los propietarios puedan buscar y reclamar a sus mascotas perdidas.
      Gracias por tu colaboraci√≥n en la reunificaci√≥n y devoluci√≥n de mascotas
      perdidas.
    </p>
    <!-- Enlace para volver a la lista de objetos perdidos -->
    <Link to="lost-dogs">Volver a Se Busca</Link>
    <p class="gratitude-note">
      ¬°Tu ayuda es fundamental para reunificaci√≥n de mascotas perdidas!
    </p>
  </div>
  <!-- Formulario para reportar mascota encontrada -->
  <div class="form">
    <FormKit type="form" submit-label="Enviar" @submit="handleSubmit">
              <!-- Campos del formulario -->
        <!-- Campos de Geolocalizaci√≥n -->
        <div class="geolocation-container">
          <button class="geolocation-button" @click="getUserLocation">
            Obtener Ubicaci√≥n
          </button>
          <p class="pin">o despl√°zate con el pin</p>
        </div>
        <div class="map-container">
          <LMap
            ref="map"
            v-model:zoom="zoom"
            :center="center"
            :use-global-leaflet="false"
          >
            <LMarker :lat-lng="center" draggable @moveend="pin" />
            <LTileLayer
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            ></LTileLayer>
          </LMap>
        </div>
      <!-- Campo para cargar imagen -->
      <FormKit
        type="file"
        label="A√±ade una imagen y espera a que se cargue"
        name="image"
        placeholder="Imagen"
        validation="required"
        :validation-messages="{
          required: 'La imagen es obligatoria',
        }"
        @change="onFileChange"
        v-model.trim="formData.image"
      />
      <!-- Spinner mientras se carga la imagen -->
      <div v-if="spinner" class="spinner">
        <SpinnerDog />
      </div>
      <!-- Previsualizaci√≥n de la imagen cargada -->
      <div v-else-if="isImageUploaded" class="image-container">
        <img :src="url" alt="Nueva imagen producto" class="image" />
      </div>
      <!-- Campo para la fecha del hallazgo -->
      <FormKit
        class="message-input"
        type="date"
        label="¬øDesde cuando lleva desaparecido?"
        name="date"
        format="DD MM YY"
        validation="required"
        :validation-messages="{
          required: 'La fecha es obligatoria',
        }"
        v-model.trim="formData.date"
      />
      <!-- Campo para el nombre -->
      <FormKit
        type="text"
        label="Nombre"
        name="name"
        placeholder="Nombre"
        validation="required"
        :validation-messages="{
          required: 'El nombre es Obligatorio',
        }"
        v-model.trim="formData.name"
      />
      <!-- Campo para el nombre del perro -->
      <FormKit
        type="text"
        label="Nombre del perro"
        name="dogName"
        placeholder="Nombre del perro"
        validation="required"
        :validation-messages="{
          required: 'El nombre es Obligatorio',
        }"
        v-model.trim="formData.dogName"
      />
      <!-- Campo para el tel√©fono -->
      <FormKit
        type="tel"
        label="Tel√©fono"
        name="phone"
        placeholder="N√∫mero de tel√©fono"
        validation="required"
        :validation-messages="{
          required: 'El Tel√©fono es Obligatorio',
        }"
        v-model.trim="formData.phone"
      />
      <!-- Campo para el email -->
      <FormKit
        type="email"
        label="Email"
        name="email"
        placeholder="Direcci√≥n de email"
        validation="required"
        :validation-messages="{
          required: 'El email es Obligatorio',
        }"
        v-model.trim="formData.email"
      />
      <!-- Campo para la ubicaci√≥n y detalles -->
      <FormKit
        type="textarea"
        label="Observaciones"
        name="observations"
        placeholder="Cualquier detalle relevante que nos ayude a identificar a su perro, como raza, peso, etc"
        :help="`${formData.observations.length} / 200`"
        validation="required | length:0,200"
        :validation-messages="{
          required: 'Debe a√±adir observaciones',
          length: 'Las obsrevaciones no pueden superar los 200 caracteres.',
        }"
        validation-visibility="blur"
        v-model="formData.observations"
        @input="handleLimitCharacters('observations', 200)"
      />
    </FormKit>
  </div>
</template>

<style scoped>
/* Estilos para geolocalizaci√≥n */
.geolocation-container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 1rem;
  gap: 1rem;
}
.geolocation-button {
  display: block;
  font-weight: 600;
  color: var(--text-100);
  text-decoration: underline;
}
.geolocation-button:hover {
  display: block;
  font-weight: 900;
  color: var(--text-200);
}
.pin {
  display: block;
}

/* Contenedor Mapa */
.map-container {
  height: 30rem;
  margin-bottom: 2rem;
}
/* Estilos para el contenedor principal */
.container {
  padding: 2rem;
}

/* Estilos para el contenedor de la nota de gratitud */
.gratitude-note {
  text-align: center;
}

/* Estilos para el formulario */
.form {
  display: flex;
  justify-content: center; /* Centrar horizontalmente */
  margin-top: 2rem;
  align-items: center; /* Centrar verticalmente */
  min-height: 50vh; /* Altura m√≠nima para centrar verticalmente */
}

.form > * {
  max-width: 40rem; /* Ancho m√°ximo del formulario */
  width: 100%; /* Hace que el formulario ocupe todo el ancho disponible */
  margin: 0 auto;
  margin-bottom: 1rem; /* Espaciado entre elementos del formulario */
}

/* Estilo para el spinner */
.spinner {
  display: flex;
  justify-content: space-around;
  margin-top: 6rem;
}

/* Contenedor para la imagen */
.image-container {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
}

/* Estilo de la imagen */
.image {
  max-width: 20rem; /* Ajusta el ancho de la imagen */
  height: auto; /* Mantiene la proporci√≥n de la imagen */
  max-height: 20rem; /* Limita la altura m√°xima de la imagen */
}
</style>


--- File: views\PrivacyPolicyView.vue ---


<template >
  <header>
    <h1>Pol√≠tica de Privacidad</h1>
  </header>
  <main>
    <section>
      <h2>1. Introducci√≥n</h2>
      <p>
        En CannineConnect, valoramos tu privacidad y estamos
        comprometidos a proteger tus datos personales. Esta pol√≠tica de
        privacidad describe c√≥mo recopilamos, usamos y protegemos tu informaci√≥n
        de acuerdo con el Reglamento General de Protecci√≥n de Datos (RGPD).
      </p>
    </section>
    <section>
      <h2>2. Responsable del Tratamiento</h2>
      <p>
        El responsable del tratamiento de tus datos es CannineConnect, con domicilio en [Direcci√≥n completa] y correo
        electr√≥nico [email@example.com].
      </p>
    </section>
    <section>
      <h2>3. Informaci√≥n que Recopilamos</h2>
      <p>Podemos recopilar los siguientes tipos de informaci√≥n:</p>
      <ul>
        <li>
          Informaci√≥n personal, como nombre y correo electr√≥nico, cuando te
          registras en nuestro sitio o suscribes a nuestro bolet√≠n.
        </li>
        <li>
          Informaci√≥n de uso, como las p√°ginas que visitas y el tiempo que pasas
          en nuestro sitio.
        </li>
        <li>
          Datos t√©cnicos, como tu direcci√≥n IP, tipo de navegador y sistema
          operativo.
        </li>
      </ul>
    </section>
    <section>
      <h2>4. Finalidades del Tratamiento</h2>
      <p>Utilizamos la informaci√≥n recopilada para:</p>
      <ul>
        <li>Proporcionar y mejorar nuestros servicios.</li>
        <li>Personalizar tu experiencia en nuestro sitio.</li>
        <li>
          Enviar comunicaciones y actualizaciones sobre nuestros servicios.
        </li>
        <li>Analizar el uso del sitio y mejorar nuestro contenido y dise√±o.</li>
      </ul>
    </section>
    <section>
      <h2>5. Legitimaci√≥n para el Tratamiento de Datos</h2>
      <p>
        La base legal para el tratamiento de tus datos es el consentimiento que
        nos otorgas al aceptar esta pol√≠tica de privacidad y al proporcionarnos
        tu informaci√≥n personal.
      </p>
    </section>
    <section>
      <h2>6. Compartir tu Informaci√≥n</h2>
      <p>
        No vendemos, intercambiamos ni transferimos a terceros tu informaci√≥n
        personal sin tu consentimiento, excepto en los siguientes casos:
      </p>
      <ul>
        <li>
          Proveedores de servicios que nos ayudan a operar nuestro sitio y
          servicios.
        </li>
        <li>En cumplimiento de la ley o en respuesta a una orden judicial.</li>
      </ul>
    </section>
    <section>
      <h2>7. Seguridad de tu Informaci√≥n</h2>
      <p>
        Implementamos medidas de seguridad para proteger tu informaci√≥n personal
        contra el acceso no autorizado, alteraci√≥n, divulgaci√≥n o destrucci√≥n.
      </p>
    </section>
    <section>
      <h2>8. Tus Derechos</h2>
      <p>En virtud del RGPD, tienes derecho a:</p>
      <ul>
        <li>Acceder a tus datos personales.</li>
        <li>Solicitar la rectificaci√≥n de datos inexactos.</li>
        <li>
          Solicitar la supresi√≥n de tus datos cuando, entre otros motivos, los
          datos ya no sean necesarios para los fines que fueron recogidos.
        </li>
        <li>
          Solicitar la limitaci√≥n del tratamiento de tus datos, en cuyo caso
          solo los conservaremos para el ejercicio o la defensa de
          reclamaciones.
        </li>
        <li>
          Oponerte al tratamiento de tus datos. Dejaremos de tratar los datos en
          la forma que nos indiques, salvo que por motivos leg√≠timos imperiosos
          o el ejercicio o la defensa de posibles reclamaciones se deban seguir
          tratando.
        </li>
        <li>Solicitar la portabilidad de tus datos.</li>
      </ul>
      <p>
        Puedes ejercer estos derechos enviando una solicitud a
        [email@example.com].
      </p>
    </section>
    <section>
      <h2>9. Cambios en esta Pol√≠tica de Privacidad</h2>
      <p>
        Nos reservamos el derecho de actualizar esta pol√≠tica de privacidad en
        cualquier momento. Te notificaremos sobre cualquier cambio publicando la
        nueva pol√≠tica en nuestro sitio.
      </p>
    </section>
    <section>
      <h2>10. Contacto</h2>
      <p>
        Si tienes preguntas sobre esta pol√≠tica de privacidad, cont√°ctanos a
        trav√©s de [email@example.com] o en [direcci√≥n completa].
      </p>
    </section>
  </main>
</template>



--- File: views\RegisterView.vue ---

<!-- RegisterView.vue -->
<script setup>
import { ref, inject } from "vue";
import { useAuthStore } from "@/stores/authStore";
import { authSchema } from "../validation/authSchema.js";

const authStore = useAuthStore();
const { register } = authStore;

const email = ref("");
const password = ref("");
const firstName = ref("");
const lastName = ref("");

const error = ref({});

const handleSubmit = async () => {
  // Resteamos errores
  error.value = {};
  // Verificamos reglas de validaci√≥n
  const emailError = authSchema.email(email.value);
  const passwordError = authSchema.password(password.value);
  // Si hay errores, establece los mensajes de error
  if (!emailError) {
    error.value.email = emailError;
  }

  if (!passwordError) {
    error.value.password = passwordError;
  }

  if (Object.keys(error.value).length > 0) {
    return;
  }
  // Si no hay errores, procede con el registro
  const displayName = `${firstName.value} `;
  await register(
    email.value,
    password.value,
    displayName
  );
};
</script>

<template>
  <div class="container">
    <p class="wellcome-message">
      ¬°Bienvenido a CanineConnect! Estamos encantados de dar la bienvenida a
      todos los amantes de los perros a nuestra comunidad en l√≠nea. En
      CanineConnect, no solo encontrar√°s un lugar para conectarte con otros
      due√±os de mascotas, sino tambi√©n una plataforma llena de recursos √∫tiles,
      consejos expertos y un espacio para compartir experiencias. Desde consejos
      de entrenamiento hasta recomendaciones de cuidado de la salud, estamos
      aqu√≠ para apoyarte en cada paso del camino mientras te embarcas en esta
      aventura emocionante junto a tu fiel amigo peludo. ¬°Reg√≠strate ahora para
      empezar a explorar todo lo que CanineConnect tiene para ofrecerte!
      ¬°Gracias por unirte a nuestra manada! El equipo de CanineConnect
    </p>
    <div class="login-form">
      <form @submit.prevent="handleSubmit">
        <div class="form-group">
          <label for="firstName">Nombre:</label>
          <input type="text" v-model.trim="firstName" required />
        </div>
        <div class="form-group">
          <label for="lastName">Apellidos:</label>
          <input type="text" v-model.trim="lastName" required />
        </div>
        <div class="form-group">
          <label for="email">Correo electr√≥nico:</label>
          <input type="email" v-model.trim="email" required />
        </div>
        <div class="form-group">
          <label for="password">Contrase√±a:</label>
          <input type="password" v-model.trim="password" required />
        </div>
        <button type="submit" class="buttons">Registrar</button>
        <div class="linkBack">
          <router-link class="linkBack" :to="{ name: 'login' }"
            >Atras</router-link
          >
        </div>
      </form>
    </div>
  </div>
</template>

<style scoped>
.container {
  padding: 0 1rem;
}
@media (min-width: 640px) {
  .container {
    max-width: 120rem;
    margin: 0 auto;
  }
}
.wellcome-message {
  text-align: justify;
}
.login-form,
.register-container {
  max-width: 400px;
  margin: 4rem auto;
}

.form-group {
  margin-bottom: 1rem;
}
.register-message {
  text-align: center;
}

label {
  display: block;
  margin-bottom: 0.5rem;
}

input[type="email"],
input[type="password"],
input[type="text"] {
  width: 100%;
  padding: 1rem;
  font-size: 1.5rem;
  border: 1px solid #ccc;
  border-radius: 3px;
}

button {
  background-color: #007bff;
  color: white;
  padding: 1rem;
  font-size: 1.5rem;
  border: none;
  border-radius: 3px;
  cursor: pointer;
  width: 100%;
}

button:hover {
  background-color: #0056b3;
}
.linkBack {
  text-decoration: none;
  text-align: center;
  margin-top: 3rem;
  color: #007bff;
}
.linkBack:hover {
  text-align: center;
  text-decoration: underline;
}
</style>



--- File: views\ResourcesView.vue ---

<script setup>
import UnderConstructionPage from '@/components/UnderConstructionPage.vue';


</script>

<template>
    <UnderConstructionPage/>
</template>
<style scoped>

</style>



